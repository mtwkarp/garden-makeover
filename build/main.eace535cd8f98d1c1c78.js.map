{"version":3,"file":"main.eace535cd8f98d1c1c78.js","mappings":"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","sources":["webpack://notion-integration-ictm/./src/style.css","webpack://notion-integration-ictm/./src/style.css?7163","webpack://notion-integration-ictm/./src/game/IoC/IoCDependenciesContainer.ts","webpack://notion-integration-ictm/./src/game/IoC/Types.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/2d/buttons2dModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/2d/scenes2dModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/3d/decorations3dModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/3d/dragControlsModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/3d/lightsModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/3d/scene3dModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/3d/targetAreasModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/app/appModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/app/gameEntryModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/assetLoaders/assetLoadersModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/engines/engineModule2d.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/engines/engineModule3d.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/engines/updateEngineModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/game/gameModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/hints/hintsModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/observables/observablesModule.ts","webpack://notion-integration-ictm/./src/game/IoC/modules/themes/themesModule.ts","webpack://notion-integration-ictm/./src/game/app/App.ts","webpack://notion-integration-ictm/./src/game/assetsLoaders/AssetLoadersManager.ts","webpack://notion-integration-ictm/./src/game/assetsLoaders/AssetsLoader2d.ts","webpack://notion-integration-ictm/./src/game/assetsLoaders/AssetsLoader3d.ts","webpack://notion-integration-ictm/./src/game/assetsLoaders/ModelsCache.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/AbstractButton.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/decoration/AbstractDecorationButton.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/decoration/DecorationButtonsManager.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/decoration/decorationButtons/BushDecorationButton.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/decoration/decorationButtons/FlowerDecorationButton.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/decoration/decorationButtons/TreeDecorationButtons.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/decoration/discardButton/DiscardPickedDecorationButton.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/decoration/types/enums.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/buttons/lightChange/LightChangeButton.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/hint/AbstractHint.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/hint/HintsManager.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/hint/implementations/HintArrow2d.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/hint/implementations/HintArrow3d.ts","webpack://notion-integration-ictm/./src/game/core/components/2d/hint/types/enums.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/DraggableDecorations3dManager.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/StaticDecorations3dManager.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/draggable/AbstractDraggableDecoration.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/draggable/bushDecoration/BushDecoration.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/draggable/flowerDecoration/FlowerDecoration.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/draggable/treeDecoration/TreeDecoration.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/static/AbstractStaticDecoration.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/static/background/SkyBackground.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/static/house/HouseDecoration.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/decorations/types/enums.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/dragControls/DragController.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/dragControls/states/DragState.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/dragControls/states/IdleState.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/lights/AbstractLight.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/lights/AmbientLight.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/lights/FillLight.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/lights/MainLight.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/lights/SceneLightsManager.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/sceneDecorator/SceneDecorationController.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/targetArea/DecorationTargetAreasController.ts","webpack://notion-integration-ictm/./src/game/core/components/3d/targetArea/targetAreas/DecorationTargetArea.ts","webpack://notion-integration-ictm/./src/game/core/game/Game.ts","webpack://notion-integration-ictm/./src/game/core/lightModes/ThemeModeManager.ts","webpack://notion-integration-ictm/./src/game/core/lightModes/services/Elements3dThemeModeService.ts","webpack://notion-integration-ictm/./src/game/core/lightModes/services/UIThemeModeService.ts","webpack://notion-integration-ictm/./src/game/core/lightModes/types/enums.ts","webpack://notion-integration-ictm/./src/game/core/observables/DecorationButtonsInteractionObservable.ts","webpack://notion-integration-ictm/./src/game/core/observables/GameProcessObservable.ts","webpack://notion-integration-ictm/./src/game/core/observables/ResizeObservable.ts","webpack://notion-integration-ictm/./src/game/core/observables/types/enums.ts","webpack://notion-integration-ictm/./src/game/core/scenes/2d/gameScene/GameScene.ts","webpack://notion-integration-ictm/./src/game/core/scenes/2d/mainScene2d/MainScene2d.ts","webpack://notion-integration-ictm/./src/game/core/scenes/2d/outroScene/OutroScene.ts","webpack://notion-integration-ictm/./src/game/core/scenes/2d/splashScene/SplashScene.ts","webpack://notion-integration-ictm/./src/game/core/scenes/2d/types/enums.ts","webpack://notion-integration-ictm/./src/game/core/scenes/3d/mainScene3d/MainScene3d.ts","webpack://notion-integration-ictm/./src/game/engines/2dEngine/Pixi2dEngine.ts","webpack://notion-integration-ictm/./src/game/engines/3dEngine/Three3dEngine.ts","webpack://notion-integration-ictm/./src/game/engines/updateEngine/GsapUpdateEngine.ts","webpack://notion-integration-ictm/./src/game/gameEntry/AbstractGameEntry.ts","webpack://notion-integration-ictm/./src/game/gameEntry/implementations/DefaultGameEntry.ts","webpack://notion-integration-ictm/./src/game/lib/2d/container/PixiContainer.ts","webpack://notion-integration-ictm/./src/game/lib/2d/scene/PixiScene.ts","webpack://notion-integration-ictm/./src/game/lib/2d/sprite/PixiSprite.ts","webpack://notion-integration-ictm/./src/game/lib/3d/light/ThreeLight.ts","webpack://notion-integration-ictm/./src/game/lib/observable/AbstractMultipleValuesObservable.ts","webpack://notion-integration-ictm/./src/game/lib/observable/AbstractObservable.ts","webpack://notion-integration-ictm/./src/index.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml,\nbody {\n    overflow: hidden;\n}\n\n.canvas-view {\n    position: absolute;\n    top: 0;\n    left: 0;\n    outline: none;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/style.css\"],\"names\":[],\"mappings\":\";AACA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;;IAEI,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,aAAa;AACjB\",\"sourcesContent\":[\"\\n* {\\n    margin: 0;\\n    padding: 0;\\n    box-sizing: border-box;\\n}\\n\\nhtml,\\nbody {\\n    overflow: hidden;\\n}\\n\\n.canvas-view {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    outline: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { Container, ContainerModule } from 'inversify';\nimport { IoCDependenciesContainerI } from './types/interfaces';\nimport { gameEntryModule } from './modules/app/gameEntryModule';\nimport { engineModule2d } from './modules/engines/engineModule2d';\nimport { engineModule3d } from './modules/engines/engineModule3d';\nimport { updateEngineModule } from './modules/engines/updateEngineModule';\nimport { appModule } from './modules/app/appModule';\nimport { scenes2dModule } from './modules/2d/scenes2dModule';\nimport { assetLoadersModule } from './modules/assetLoaders/assetLoadersModule';\nimport { gameModule } from './modules/game/gameModule';\nimport { scene3dModule } from './modules/3d/scene3dModule';\nimport { decorations3dModule } from './modules/3d/decorations3dModule';\nimport { buttons2dModule } from './modules/2d/buttons2dModule';\nimport { targetAreasModule } from './modules/3d/targetAreasModule';\nimport { dragControlsModule } from './modules/3d/dragControlsModule';\nimport { themesModule } from './modules/themes/themesModule';\nimport { lightsModule } from './modules/3d/lightsModule';\nimport { observablesModule } from './modules/observables/observablesModule';\nimport { hintsModule } from './modules/hints/hintsModule';\n\nexport default class IoCDependenciesContainer extends Container implements IoCDependenciesContainerI {\n  private modules: ContainerModule[] = [\n    gameEntryModule,\n    engineModule2d,\n    engineModule3d,\n    updateEngineModule,\n    appModule,\n    scenes2dModule,\n    assetLoadersModule,\n    gameModule,\n    scene3dModule,\n    decorations3dModule,\n    buttons2dModule,\n    targetAreasModule,\n    dragControlsModule,\n    themesModule,\n    lightsModule,\n    observablesModule,\n    hintsModule,\n  ];\n\n  public loadDependencies(): void {\n    this.load(...this.modules);\n  }\n}\n","export const TYPES = {\n  GameEntryFactory: Symbol.for('GameEntry'),\n  Engine2d: Symbol.for('Engine2d'),\n  Engine3d: Symbol.for('Engine3d'),\n  UpdateEngine: Symbol.for('UpdateEngine'),\n  App: Symbol.for('App'),\n  MainScene2d: Symbol.for('MainScene2d'),\n  MainScene3d: Symbol.for('MainScene3d'),\n  Scenes2dGetter: Symbol.for('Scenes2dCollection'),\n  AssetLoader3d: Symbol.for('AssetLoader3d'),\n  AssetLoader2d: Symbol.for('AssetLoader2d'),\n  AssetLoadersManager: Symbol.for('AssetLoadersManager'),\n  Game: Symbol.for('Game'),\n  StaticDecorations3dCollection: Symbol.for('Decorations3dCollection'),\n  DraggableDecorations3dManager: Symbol.for('DraggableDecorations3dManager'),\n  DraggableDecorations3dCollection: Symbol.for('DraggableDecorations3dCollection'),\n  Decorations3dManager: Symbol.for('Decorations3dManager'),\n  DecorationsPick2dButtonsCollection: Symbol.for('DecorationsPick2dButtonsCollection'),\n  ChangeLightButton: Symbol.for('ChangeLightButton'),\n  DecorationButtonsManager: Symbol.for('DecorationButtonsManager'),\n  SceneLightsManager: Symbol.for('SceneLight'),\n  SceneLightsCollection: Symbol.for('SceneLightsCollection'),\n  DecorationTargetAreasController: Symbol.for('DecorationTargetAreasController'),\n  DecorationTargetAreaCollection: Symbol.for('DecorationTargetAreaCollection'),\n  SceneDecorationController: Symbol.for('SceneDecorationManager'),\n  DragController: Symbol.for('DragController'),\n  HintsCollection: Symbol.for('HintsCollection'),\n  HintsManager: Symbol.for('HintManager'),\n  ThemeModeManager: Symbol.for('ThemeModeManager'),\n  Elements3dThemeModeService: Symbol.for('LightModeService'),\n  UIThemeModeService: Symbol.for('UIThemeModeService'),\n  ThemeModeServices: Symbol.for('ThemeModeServices'),\n  GameProcessObservable: Symbol.for('GameProcessObservable'),\n  DecorationButtonsInteractionObservable: Symbol.for('DecorationButtonsInteractionObservable'),\n  ResizeObservable: Symbol.for('ResizeObservable'),\n};\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { DecorationButtonsCollection } from '../../../core/components/2d/buttons/decoration/types/types';\nimport { DecorationButtonNames } from '../../../core/components/2d/buttons/decoration/types/enums';\nimport BushDecorationButton from '../../../core/components/2d/buttons/decoration/decorationButtons/BushDecorationButton';\nimport TreeDecorationButton from '../../../core/components/2d/buttons/decoration/decorationButtons/TreeDecorationButtons';\nimport FlowerDecorationButton from '../../../core/components/2d/buttons/decoration/decorationButtons/FlowerDecorationButton';\nimport DiscardPickedDecorationButton from '../../../core/components/2d/buttons/decoration/discardButton/DiscardPickedDecorationButton';\nimport { ContainerI } from '../../../lib/2d/types/interfaces';\nimport LightChangeButton from '../../../core/components/2d/buttons/lightChange/LightChangeButton';\nimport { DecorationButtonsManager } from '../../../core/components/2d/buttons/decoration/DecorationButtonsManager';\nimport { DecorationButtonsManagerI } from '../../../core/components/2d/buttons/decoration/types/interfaces';\n\nexport const buttons2dModule = new ContainerModule((bind) => {\n  bind<DecorationButtonsCollection>(TYPES.DecorationsPick2dButtonsCollection).toDynamicValue(\n    (context): DecorationButtonsCollection => ({\n      [DecorationButtonNames.bush]: context.container.resolve(BushDecorationButton),\n      [DecorationButtonNames.tree]: context.container.resolve(TreeDecorationButton),\n      [DecorationButtonNames.flower]: context.container.resolve(FlowerDecorationButton),\n      [DecorationButtonNames.discard]: context.container.resolve(DiscardPickedDecorationButton),\n    }),\n  );\n\n  bind<ContainerI>(TYPES.ChangeLightButton).to(LightChangeButton);\n  bind<DecorationButtonsManagerI>(TYPES.DecorationButtonsManager).to(DecorationButtonsManager);\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { Scenes2dGetter } from '../../../core/scenes/2d/types/types';\nimport { SceneNames2d } from '../../../core/scenes/2d/types/enums';\nimport SplashScene from '../../../core/scenes/2d/splashScene/SplashScene';\nimport { Scene2dI } from '../../../lib/2d/types/interfaces';\nimport { MainScene2dI } from '../../../core/scenes/2d/mainScene2d/types/interfaces';\nimport MainScene2d from '../../../core/scenes/2d/mainScene2d/MainScene2d';\nimport OutroScene from '../../../core/scenes/2d/outroScene/OutroScene';\nimport GameScene from '../../../core/scenes/2d/gameScene/GameScene';\n\nexport const scenes2dModule = new ContainerModule((bind) => {\n  bind<Scenes2dGetter>(TYPES.Scenes2dGetter).toFactory((context) => {\n    const scenesByNames: Partial<Record<SceneNames2d, new (...args: any) => Scene2dI>> = {\n      [SceneNames2d.splash]: SplashScene,\n      [SceneNames2d.outro]: OutroScene,\n      [SceneNames2d.game]: GameScene,\n    };\n\n    return (sceneName: SceneNames2d): Scene2dI | never => {\n      const scene = scenesByNames[sceneName];\n\n      if (!scene) {\n        throw new Error(`No scene with name ${sceneName} found.`);\n      }\n\n      return context.container.resolve(scene);\n    };\n  });\n\n  bind<MainScene2dI>(TYPES.MainScene2d).to(MainScene2d).inSingletonScope();\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport {\n  DraggableDecorations3dCollection,\n  StaticDecorations3dCollection,\n} from '../../../core/components/3d/decorations/types/types';\nimport SkyBackground from '../../../core/components/3d/decorations/static/background/SkyBackground';\nimport {\n  DraggableDecorations3dManagerI,\n  StaticDecorations3dManagerI,\n} from '../../../core/components/3d/decorations/types/interfaces';\nimport StaticDecorations3dManager from '../../../core/components/3d/decorations/StaticDecorations3dManager';\nimport HouseDecoration from '../../../core/components/3d/decorations/static/house/HouseDecoration';\nimport { DraggableDecorationNames } from '../../../core/components/3d/decorations/types/enums';\nimport TreeDecoration from '../../../core/components/3d/decorations/draggable/treeDecoration/TreeDecoration';\nimport BushDecoration from '../../../core/components/3d/decorations/draggable/bushDecoration/BushDecoration';\nimport DraggableDecorations3dManager from '../../../core/components/3d/decorations/DraggableDecorations3dManager';\nimport SceneDecorationController from '../../../core/components/3d/sceneDecorator/SceneDecorationController';\nimport { SceneDecorationControllerI } from '../../../core/components/3d/sceneDecorator/types/interfaces';\nimport FlowerDecoration from '../../../core/components/3d/decorations/draggable/flowerDecoration/FlowerDecoration';\n\nexport const decorations3dModule = new ContainerModule((bind) => {\n  bind<StaticDecorations3dCollection>(TYPES.StaticDecorations3dCollection).toDynamicValue(\n    (context): StaticDecorations3dCollection => [\n      context.container.resolve(SkyBackground),\n      context.container.resolve(HouseDecoration),\n    ],\n  );\n  bind<StaticDecorations3dManagerI>(TYPES.Decorations3dManager).to(StaticDecorations3dManager);\n\n  bind<DraggableDecorations3dCollection>(TYPES.DraggableDecorations3dCollection).toDynamicValue(\n    (context): DraggableDecorations3dCollection => ({\n      [DraggableDecorationNames.tree]: context.container.resolve(TreeDecoration),\n      [DraggableDecorationNames.flower]: context.container.resolve(FlowerDecoration),\n      [DraggableDecorationNames.bush]: context.container.resolve(BushDecoration),\n    }),\n  );\n\n  bind<DraggableDecorations3dManagerI>(TYPES.DraggableDecorations3dManager).to(DraggableDecorations3dManager);\n\n  bind<SceneDecorationControllerI>(TYPES.SceneDecorationController).to(SceneDecorationController);\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { DragControllerI } from '../../../core/components/3d/dragControls/types/interfaces';\nimport { DragController } from '../../../core/components/3d/dragControls/DragController';\n\nexport const dragControlsModule = new ContainerModule((bind) => {\n  bind<DragControllerI>(TYPES.DragController).to(DragController);\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { SceneLightsManagerI } from '../../../core/components/3d/lights/types/interfaces';\nimport SceneLightsManager from '../../../core/components/3d/lights/SceneLightsManager';\nimport AmbientLight from '../../../core/components/3d/lights/AmbientLight';\nimport FillLight from '../../../core/components/3d/lights/FillLight';\nimport MainLight from '../../../core/components/3d/lights/MainLight';\nimport { ThemedLightI } from '../../../core/lightModes/types/interfaces';\n\nexport const lightsModule = new ContainerModule((bind) => {\n  bind<SceneLightsManagerI>(TYPES.SceneLightsManager).to(SceneLightsManager);\n  bind<ThemedLightI[]>(TYPES.SceneLightsCollection).toDynamicValue(({ container }): ThemedLightI[] => [\n    container.resolve(AmbientLight),\n    container.resolve(FillLight),\n    container.resolve(MainLight),\n  ]);\n});\n","import { ContainerModule } from 'inversify';\nimport { MainScene3dI } from '../../../core/scenes/3d/mainScene3d/types/interfaces';\nimport { TYPES } from '../../Types';\nimport MainScene3d from '../../../core/scenes/3d/mainScene3d/MainScene3d';\n\nexport const scene3dModule = new ContainerModule((bind) => {\n  bind<MainScene3dI>(TYPES.MainScene3d).to(MainScene3d).inSingletonScope();\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { DecorationTargetAreasControllerI } from '../../../core/components/3d/targetArea/types/interfaces';\nimport DecorationTargetAreasController from '../../../core/components/3d/targetArea/DecorationTargetAreasController';\nimport { DecorationTargetAreasCollection } from '../../../core/components/3d/targetArea/types/types';\nimport DecorationTargetArea from '../../../core/components/3d/targetArea/targetAreas/DecorationTargetArea';\n\nexport const targetAreasModule = new ContainerModule((bind) => {\n  bind<DecorationTargetAreasControllerI>(TYPES.DecorationTargetAreasController).to(DecorationTargetAreasController);\n  bind<DecorationTargetAreasCollection>(TYPES.DecorationTargetAreaCollection).toDynamicValue(\n    (context): DecorationTargetAreasCollection => {\n      const collection: DecorationTargetAreasCollection = [];\n\n      for (let i = 0; i < 3; i++) {\n        const targetArea = context.container.resolve(DecorationTargetArea);\n        collection.push(targetArea);\n      }\n\n      return collection;\n    },\n  );\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { AppI } from '../../../app/types/interfaces';\nimport App from '../../../app/App';\n\nexport const appModule = new ContainerModule((bind) => {\n  bind<AppI>(TYPES.App).to(App);\n});\n","import { ContainerModule, interfaces } from 'inversify';\nimport { GameEntryI } from '../../../gameEntry/types/interfaces';\nimport { TYPES } from '../../Types';\nimport DefaultGameEntry from '../../../gameEntry/implementations/DefaultGameEntry';\n\nexport const gameEntryModule = new ContainerModule((bind) => {\n  bind<interfaces.Factory<GameEntryI>>(TYPES.GameEntryFactory).toFactory<GameEntryI>(\n    (context) => (): GameEntryI => context.container.resolve<GameEntryI>(DefaultGameEntry),\n  );\n});\n","import { ContainerModule } from 'inversify';\nimport { AssetLoadersManagerI, AssetsLoader2dI, AssetsLoader3dI } from '../../../assetsLoaders/types/interfaces';\nimport { TYPES } from '../../Types';\nimport AssetsLoader3d from '../../../assetsLoaders/AssetsLoader3d';\nimport AssetsLoader2d from '../../../assetsLoaders/AssetsLoader2d';\nimport AssetLoadersManager from '../../../assetsLoaders/AssetLoadersManager';\n\nexport const assetLoadersModule = new ContainerModule((bind) => {\n  bind<AssetsLoader3dI>(TYPES.AssetLoader3d).to(AssetsLoader3d);\n  bind<AssetsLoader2dI>(TYPES.AssetLoader2d).to(AssetsLoader2d);\n  bind<AssetLoadersManagerI>(TYPES.AssetLoadersManager).to(AssetLoadersManager);\n});\n","import { ContainerModule } from 'inversify';\nimport { GraphicsEngineI } from '../../../engines/types/interfaces';\nimport { TYPES } from '../../Types';\nimport Pixi2dEngine from '../../../engines/2dEngine/Pixi2dEngine';\n\nexport const engineModule2d = new ContainerModule((bind) => {\n  bind<GraphicsEngineI>(TYPES.Engine2d).to(Pixi2dEngine).inSingletonScope();\n});\n","import { ContainerModule } from 'inversify';\nimport { GraphicsEngine3dI } from '../../../engines/types/interfaces';\nimport { TYPES } from '../../Types';\nimport Three3dEngine from '../../../engines/3dEngine/Three3dEngine';\n\nexport const engineModule3d = new ContainerModule((bind) => {\n  bind<GraphicsEngine3dI>(TYPES.Engine3d).to(Three3dEngine).inSingletonScope();\n});\n","import { ContainerModule } from 'inversify';\nimport { UpdateEngineI } from '../../../engines/types/interfaces';\nimport { TYPES } from '../../Types';\nimport GsapUpdateEngine from '../../../engines/updateEngine/GsapUpdateEngine';\n\nexport const updateEngineModule = new ContainerModule((bind) => {\n  bind<UpdateEngineI>(TYPES.UpdateEngine).to(GsapUpdateEngine).inSingletonScope();\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { GameI } from '../../../core/game/types/interfaces';\nimport Game from '../../../core/game/Game';\n\nexport const gameModule = new ContainerModule((bind) => {\n  bind<GameI>(TYPES.Game).to(Game);\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { HintsCollection, HintsManagerI } from '../../../core/components/2d/hint/types/interfaces';\nimport HintArrow2d from '../../../core/components/2d/hint/implementations/HintArrow2d';\nimport HintArrow3d from '../../../core/components/2d/hint/implementations/HintArrow3d';\nimport HintsManager from '../../../core/components/2d/hint/HintsManager';\n\nexport const hintsModule = new ContainerModule((bind) => {\n  bind<HintsManagerI>(TYPES.HintsManager).to(HintsManager);\n  bind<HintsCollection>(TYPES.HintsCollection).toDynamicValue(\n    ({ container }): HintsCollection => ({\n      hints2d: [container.resolve(HintArrow2d)],\n      hints3d: [container.resolve(HintArrow3d)],\n    }),\n  );\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport { MultipleValuesObservableI, ObservableI } from '../../../lib/observable/types/interfaces';\nimport { ResizeData } from '../../../core/observables/types/types';\nimport ResizeObservable from '../../../core/observables/ResizeObservable';\nimport { GameProcessEvents, DecorationButtonsInteractionEvents } from '../../../core/observables/types/enums';\nimport { DecorationButtonNames } from '../../../core/components/2d/buttons/decoration/types/enums';\nimport DecorationButtonsInteractionObservable from '../../../core/observables/DecorationButtonsInteractionObservable';\nimport GameProcessObservable from '../../../core/observables/GameProcessObservable';\n\nexport const observablesModule = new ContainerModule((bind) => {\n  bind<ObservableI<ResizeData>>(TYPES.ResizeObservable).to(ResizeObservable).inSingletonScope();\n  bind<MultipleValuesObservableI<DecorationButtonsInteractionEvents, DecorationButtonNames>>(\n    TYPES.DecorationButtonsInteractionObservable,\n  )\n    .to(DecorationButtonsInteractionObservable)\n    .inSingletonScope();\n  bind<MultipleValuesObservableI<GameProcessEvents, null>>(TYPES.GameProcessObservable)\n    .to(GameProcessObservable)\n    .inSingletonScope();\n});\n","import { ContainerModule } from 'inversify';\nimport { TYPES } from '../../Types';\nimport {\n  Elements3dThemeModeServiceI,\n  ThemeModeServiceI,\n  UIThemeModeServiceI,\n} from '../../../core/lightModes/types/interfaces';\nimport { UIThemeModeService } from '../../../core/lightModes/services/UIThemeModeService';\nimport { ThemeModeManager } from '../../../core/lightModes/ThemeModeManager';\nimport { ThemeModeServicesCollection } from '../../../core/lightModes/types/types';\nimport { Elements3dThemeModeService } from '../../../core/lightModes/services/Elements3dThemeModeService';\n\nexport const themesModule = new ContainerModule((bind) => {\n  bind<UIThemeModeServiceI>(TYPES.UIThemeModeService).to(UIThemeModeService).inSingletonScope();\n  bind<Elements3dThemeModeServiceI>(TYPES.Elements3dThemeModeService).to(Elements3dThemeModeService).inSingletonScope();\n  bind<ThemeModeServicesCollection>(TYPES.ThemeModeServices).toDynamicValue(\n    ({ container }): ThemeModeServicesCollection => [\n      container.get(TYPES.UIThemeModeService),\n      container.get(TYPES.Elements3dThemeModeService),\n    ],\n  );\n  bind<ThemeModeServiceI>(TYPES.ThemeModeManager).to(ThemeModeManager);\n});\n","import { inject, injectable } from 'inversify';\nimport { GraphicsEngineI, UpdateEngineI } from '../engines/types/interfaces';\nimport { TYPES } from '../IoC/Types';\nimport { AppI } from './types/interfaces';\nimport { GameI } from '../core/game/types/interfaces';\n\n@injectable()\nexport default class App implements AppI {\n  private readonly engine2d: GraphicsEngineI;\n\n  private readonly engine3d: GraphicsEngineI;\n\n  private readonly updateEngine: UpdateEngineI;\n\n  private readonly game: GameI;\n\n  constructor(\n  @inject(TYPES.Engine2d) engine2d: GraphicsEngineI,\n    @inject(TYPES.Engine3d) engine3d: GraphicsEngineI,\n    @inject(TYPES.UpdateEngine) updateEngine: UpdateEngineI,\n    @inject(TYPES.Game) game: GameI,\n  ) {\n    this.engine2d = engine2d;\n    this.engine3d = engine3d;\n    this.updateEngine = updateEngine;\n    this.game = game;\n  }\n\n  public async runGame(): Promise<void> {\n    await this.setupEngines();\n    await this.game.startGameSetup();\n    this.game.startGame();\n  }\n\n  private async setupEngines(): Promise<void> {\n    await this.engine2d.initialize();\n    await this.engine3d.initialize();\n    this.updateEngine.initialize();\n\n    this.updateEngine.addCallbackToUpdateLoop(this.engine2d.update.bind(this.engine2d));\n    this.updateEngine.addCallbackToUpdateLoop(this.engine3d.update.bind(this.engine3d));\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { AssetLoadersManagerI, AssetsLoader2dI, AssetsLoader3dI } from './types/interfaces';\nimport { TYPES } from '../IoC/Types';\nimport { AssetData2d, AssetData3d } from './types/types';\n\n@injectable()\nexport default class AssetLoadersManager implements AssetLoadersManagerI {\n  private readonly assetLoader2d: AssetsLoader2dI;\n\n  private readonly assetLoader3d: AssetsLoader3dI;\n\n  constructor(\n  @inject(TYPES.AssetLoader3d) assetLoader3d: AssetsLoader3dI,\n    @inject(TYPES.AssetLoader2d) assetLoader2d: AssetsLoader2dI,\n  ) {\n    this.assetLoader2d = assetLoader2d;\n    this.assetLoader3d = assetLoader3d;\n  }\n\n  public async loadAllAssets(): Promise<void> {\n    await this.assetLoader2d.loadAllAssets();\n    await this.assetLoader3d.loadAllAssets();\n  }\n\n  public async loadSpecific2dAssets(data: AssetData2d[]): Promise<void> {\n    await this.assetLoader2d.loadSpecificAssets(data);\n  }\n\n  public async loadSpecific3dAssets(data: AssetData3d[]): Promise<void> {\n    await this.assetLoader3d.loadSpecificAssets(data);\n  }\n}\n","import { Assets } from 'pixi.js';\nimport { injectable } from 'inversify';\nimport { AssetData2d } from './types/types';\nimport manifest2d from '../../assets/manifestAssets2d.json';\nimport { AssetsLoader2dI } from './types/interfaces';\n\n@injectable()\nexport default class AssetsLoader2d implements AssetsLoader2dI {\n  private readonly assets: AssetData2d[];\n\n  private readonly loadedAssetsNames: string[] = [];\n\n  constructor() {\n    this.assets = manifest2d.assets;\n  }\n\n  public async loadAllAssets(): Promise<void> {\n    await this.loadSpecificAssets(this.assets);\n  }\n\n  public async loadSpecificAssets(assets: AssetData2d[]): Promise<void> {\n    const filteredAssets = assets.filter((el) => !this.loadedAssetsNames.includes(el.alias));\n    const assetNames = filteredAssets.map((asset) => asset.alias);\n\n    filteredAssets.forEach((asset) => {\n      Assets.add(asset);\n    });\n\n    this.loadedAssetsNames.push(...assetNames);\n\n    await Assets.load(assetNames);\n  }\n}\n","import * as THREE from 'three';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { injectable } from 'inversify';\nimport {\n  AssetData3d, FBXWithMapAsset, Model3dCache, OBJWithMTLAsset,\n} from './types/types';\nimport { AssetsLoader3dI } from './types/interfaces';\nimport manifest3d from '../../assets/manifestAssets3d.json';\nimport ModelsCache from './ModelsCache';\n\n@injectable()\nexport default class AssetsLoader3d implements AssetsLoader3dI {\n  private readonly fbxLoader: FBXLoader;\n\n  private readonly objLoader: OBJLoader;\n\n  private readonly mtlLoader: MTLLoader;\n\n  private readonly textureLoader: THREE.TextureLoader;\n\n  constructor() {\n    this.fbxLoader = new FBXLoader();\n    this.objLoader = new OBJLoader();\n    this.mtlLoader = new MTLLoader();\n    this.textureLoader = new THREE.TextureLoader();\n  }\n\n  public async loadAllAssets(): Promise<void> {\n    await this.loadSpecificAssets(manifest3d.assets);\n  }\n\n  public async loadSpecificAssets(assets: AssetData3d[]): Promise<void> {\n    const promises = assets.map((assetData) => this.loadModel(assetData));\n\n    await Promise.all(promises).then((models) => {\n      models.forEach((el) => {\n        ModelsCache.addModel(el.model, el.name);\n      });\n    });\n  }\n\n  private loadModel(asset: AssetData3d): Promise<Model3dCache> {\n    return new Promise((resolve, reject) => {\n      const extension = asset.src.split('.').pop()?.toLowerCase();\n\n      switch (extension) {\n        case 'fbx':\n          this.loadFBX(asset as FBXWithMapAsset)\n            .then((model) => resolve(model))\n            .catch(reject);\n          break;\n        case 'obj':\n          this.loadOBJ(asset as OBJWithMTLAsset)\n            .then((model) => resolve(model))\n            .catch(reject);\n          break;\n        default:\n          reject(`Unsupported file format: ${extension}`);\n      }\n    });\n  }\n\n  private loadFBX(asset: FBXWithMapAsset): Promise<Model3dCache> {\n    return new Promise((resolve, reject) => {\n      this.fbxLoader.load(\n        asset.src,\n        (fbx) => {\n          if (asset.textures) {\n            fbx.traverse((child: THREE.Object3D) => {\n              if (child instanceof THREE.Mesh && child.material) {\n                const material = child.material as THREE.MeshStandardMaterial;\n\n                if (asset.textures && asset.textures.normal) {\n                  material.normalMap = this.textureLoader.load(asset.textures.normal);\n                }\n\n                material.needsUpdate = true;\n              }\n            });\n          }\n\n          resolve({ name: asset.alias, model: fbx });\n        },\n        undefined,\n        (error) => reject(`Failed to load FBX model: ${error}`),\n      );\n    });\n  }\n\n  private loadOBJ(asset: OBJWithMTLAsset): Promise<Model3dCache> {\n    return new Promise((resolve, reject) => {\n      if (asset.mtl) {\n        this.mtlLoader.load(\n          asset.mtl,\n          (materials) => {\n            materials.preload();\n            this.objLoader.setMaterials(materials);\n            this.loadOBJModel(asset.src, asset.alias)\n              .then((model) => resolve(model))\n              .catch(reject);\n          },\n          undefined,\n          (error) => reject(`Failed to load MTL file: ${error}`),\n        );\n      } else {\n        this.loadOBJModel(asset.src, asset.alias)\n          .then((model) => resolve(model))\n          .catch(reject);\n      }\n    });\n  }\n\n  private loadOBJModel(url: string, alias: string): Promise<Model3dCache> {\n    return new Promise((resolve, reject) => {\n      this.objLoader.load(\n        url,\n        (obj) => resolve({ name: alias, model: obj }),\n        undefined,\n        (error) => reject(`Failed to load OBJ model: ${error}`),\n      );\n    });\n  }\n}\n","import * as THREE from 'three';\n\nexport default class ModelsCache {\n  private static models: Record<string, THREE.Group | THREE.Object3D> = {};\n\n  public static addModel(model: THREE.Group | THREE.Object3D, modelName: string): void {\n    ModelsCache.models[modelName] = model;\n  }\n\n  public static getModel(modelName: string): THREE.Group | THREE.Object3D | never {\n    const model = ModelsCache.models[modelName];\n\n    if (!model) {\n      throw new Error(`No model with name - ${modelName} found`);\n    }\n\n    return model;\n  }\n}\n","import { injectable } from 'inversify';\nimport gsap from 'gsap';\nimport PixiContainer from '../../../../lib/2d/container/PixiContainer';\nimport { ContainerI, SpriteI } from '../../../../lib/2d/types/interfaces';\nimport { ThemedUIElementI } from '../../../lightModes/types/interfaces';\nimport { LightModes } from '../../../lightModes/types/enums';\n\n@injectable()\nexport default abstract class AbstractButton extends PixiContainer implements ThemedUIElementI {\n  protected spritesContainer: ContainerI = new PixiContainer();\n\n  protected clickAnimationFinished: boolean = true;\n\n  protected buttonBackgroundTint: number = 0xecffdc;\n\n  protected background: SpriteI;\n\n  public applyTheme(lightMode: LightModes): void {\n    if (lightMode === LightModes.day) {\n      this.setDayMode();\n    } else {\n      this.setNightMode();\n    }\n  }\n\n  protected setNightMode(): void {\n    if (this.background) {\n      this.background.setTint(0x6f8faf);\n    }\n  }\n\n  protected setDayMode(): void {\n    if (this.background) {\n      this.background.setTint(this.buttonBackgroundTint);\n    }\n  }\n\n  protected animateClick(): void {\n    if (!this.clickAnimationFinished) {\n      return;\n    }\n\n    this.clickAnimationFinished = false;\n    gsap.to(this.spritesContainer.scale, {\n      duration: 0.15,\n      x: 0.85,\n      y: 0.85,\n      ease: 'power1.out',\n      yoyo: true,\n      repeat: 1,\n      onComplete: () => {\n        this.clickAnimationFinished = true;\n      },\n    });\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { DecorationPickButtonI } from './types/interfaces';\nimport PixiContainer from '../../../../../lib/2d/container/PixiContainer';\nimport { TYPES } from '../../../../../IoC/Types';\nimport { DecorationButtonNames } from './types/enums';\nimport AbstractButton from '../AbstractButton';\nimport PixiSprite from '../../../../../lib/2d/sprite/PixiSprite';\nimport { MultipleValuesObservableI } from '../../../../../lib/observable/types/interfaces';\nimport { DecorationButtonsInteractionEvents } from '../../../../observables/types/enums';\n\n@injectable()\nexport default abstract class AbstractDecorationButton extends AbstractButton implements DecorationPickButtonI {\n  protected disabledForever: boolean = false;\n\n  public abstract readonly decorationName: DecorationButtonNames;\n\n  @inject(TYPES.DecorationButtonsInteractionObservable)\n  protected readonly interactionObservable: MultipleValuesObservableI<\n  DecorationButtonsInteractionEvents,\n  DecorationButtonNames\n  >;\n\n  constructor() {\n    super();\n    this.makeInteractive();\n    this.enableButtonMode();\n    this.spritesContainer = new PixiContainer();\n    this.addChild(this.spritesContainer.view);\n  }\n\n  protected subscribe(): void {\n    this.onPointerDown(this.onClick.bind(this));\n  }\n\n  protected onClick(): void {\n    this.animateClick();\n    this.triggerClickEvent();\n  }\n\n  protected abstract createIcon(): void;\n  protected abstract initialize(): void;\n\n  protected createChildren(): void {\n    this.createButtonBackground();\n    this.createIcon();\n  }\n\n  protected createButtonBackground(): void {\n    this.background = new PixiSprite('gameScreen/buttons/simple-button.png');\n    this.background.setTint(this.buttonBackgroundTint);\n    this.background.enableButtonMode();\n\n    this.spritesContainer.addChild(this.background.view);\n  }\n\n  protected triggerClickEvent(): void {\n    this.interactionObservable.notify(DecorationButtonsInteractionEvents.decorationButtonClick, this.decorationName);\n  }\n\n  public disableForever(): void {\n    this.disable();\n    this.disabledForever = true;\n  }\n\n  public disable(): void {\n    this.makeNoninteractive();\n    this.disableButtonMode();\n    this.setTint(0xa9a9a9);\n  }\n\n  public enable(): void {\n    if (this.disabledForever) {\n      return;\n    }\n\n    this.makeInteractive();\n    this.enableButtonMode();\n    this.setTint(16777215);\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport PixiContainer from '../../../../../lib/2d/container/PixiContainer';\nimport { TYPES } from '../../../../../IoC/Types';\nimport { DecorationButtonsCollection } from './types/types';\nimport { ContainerI } from '../../../../../lib/2d/types/interfaces';\nimport { DecorationButtonNames } from './types/enums';\nimport { DecorationButtonsManagerI, DecorationPickButtonI } from './types/interfaces';\nimport { UIThemeModeServiceI } from '../../../../lightModes/types/interfaces';\nimport { MultipleValuesObservableI } from '../../../../../lib/observable/types/interfaces';\nimport { DecorationButtonsInteractionEvents, GameProcessEvents } from '../../../../observables/types/enums';\nimport { HintsManagerI } from '../../hint/types/interfaces';\nimport { HintIds2d } from '../../hint/types/enums';\n\n@injectable()\nexport class DecorationButtonsManager implements DecorationButtonsManagerI {\n  private readonly buttons: DecorationButtonsCollection;\n\n  private readonly buttonsArr: DecorationPickButtonI[];\n\n  private container: ContainerI;\n\n  private lastClickedButtonName: DecorationButtonNames | null;\n\n  private readonly themeModeService: UIThemeModeServiceI;\n\n  private readonly gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>;\n\n  private readonly decorationButtonsInteractionObservable: MultipleValuesObservableI<\n  DecorationButtonsInteractionEvents,\n  DecorationButtonNames\n  >;\n\n  private readonly hintsManager: HintsManagerI;\n\n  constructor(\n  @inject(TYPES.DecorationsPick2dButtonsCollection) decorationPickButtons: DecorationButtonsCollection,\n    @inject(TYPES.HintsManager) hintsManager: HintsManagerI,\n    @inject(TYPES.UIThemeModeService) themeModeService: UIThemeModeServiceI,\n    @inject(TYPES.GameProcessObservable) gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>,\n    @inject(TYPES.DecorationButtonsInteractionObservable)\n    decorationButtonsInteractionObservable: MultipleValuesObservableI<\n    DecorationButtonsInteractionEvents,\n    DecorationButtonNames\n    >,\n  ) {\n    this.gameProcessObservable = gameProcessObservable;\n    this.decorationButtonsInteractionObservable = decorationButtonsInteractionObservable;\n    this.themeModeService = themeModeService;\n    this.buttons = decorationPickButtons;\n    this.buttonsArr = Object.keys(this.buttons).map((key) => this.buttons[key as DecorationButtonNames]);\n    this.hintsManager = hintsManager;\n\n    this.initialize();\n  }\n\n  private initialize(): void {\n    this.setPositionsForButtons();\n    this.createChildren();\n    this.registerButtonsOnThemeModeChange();\n    this.subscribe();\n    this.hintsManager.displayHint(HintIds2d.decorationPickHintArrow);\n  }\n\n  private registerButtonsOnThemeModeChange(): void {\n    this.buttonsArr.forEach((btn) => {\n      this.themeModeService.registerUIElement(btn);\n    });\n  }\n\n  private setPositionsForButtons(): void {\n    for (let i = 0; i < this.buttonsArr.length; i++) {\n      const button = this.buttonsArr[i];\n\n      button.setPositionY((i + 1) * 100);\n      button.setScale(0.35, 0.35);\n    }\n\n    this.buttons[DecorationButtonNames.discard].setPositionY(0);\n  }\n\n  private disableDecorationButtons(): void {\n    this.decorationPickButtons.forEach((button) => {\n      button.disable();\n    });\n  }\n\n  private enableDecorationButtons(): void {\n    this.decorationPickButtons.forEach((button) => {\n      button.enable();\n    });\n  }\n\n  private onDecorationPickButtonClick(name: DecorationButtonNames): void {\n    this.hintsManager.hideHintAsCompleted(HintIds2d.decorationPickHintArrow);\n    this.buttons[DecorationButtonNames.discard].show();\n    this.disableDecorationButtons();\n    this.lastClickedButtonName = name;\n  }\n\n  private onDiscardButtonClick(): void {\n    this.buttons[DecorationButtonNames.discard].hide();\n    this.enableDecorationButtons();\n  }\n\n  private get decorationPickButtons(): DecorationPickButtonI[] {\n    return this.buttonsArr.filter((button) => button.decorationName !== DecorationButtonNames.discard);\n  }\n\n  private subscribe(): void {\n    this.decorationButtonsInteractionObservable.subscribe(\n      DecorationButtonsInteractionEvents.decorationButtonClick,\n      this.onDecorationPickButtonClick,\n      this,\n    );\n\n    this.decorationButtonsInteractionObservable.subscribe(\n      DecorationButtonsInteractionEvents.cancelDecorationButtonClick,\n      this.onDiscardButtonClick,\n      this,\n    );\n\n    this.gameProcessObservable.subscribe(\n      GameProcessEvents.decorationSuccessfullyPlaced,\n      this.onSuccessfulDecorationPlacing,\n      this,\n    );\n  }\n\n  private onSuccessfulDecorationPlacing(): void {\n    if (this.lastClickedButtonName) {\n      this.buttons[this.lastClickedButtonName].disableForever();\n    }\n\n    this.buttons[DecorationButtonNames.discard].hide();\n    this.enableDecorationButtons();\n  }\n\n  private createChildren(): void {\n    this.container = new PixiContainer();\n\n    const hintPosition = {\n      x: this.buttons[DecorationButtonNames.bush].position.x - 90,\n      y: this.buttons[DecorationButtonNames.bush].position.y,\n    };\n    this.hintsManager.add2DHint(HintIds2d.decorationPickHintArrow, this.container, hintPosition);\n\n    this.container.addChild(\n      this.buttons[DecorationButtonNames.discard].view,\n      this.buttons[DecorationButtonNames.flower].view,\n      this.buttons[DecorationButtonNames.bush].view,\n      this.buttons[DecorationButtonNames.tree].view,\n    );\n  }\n\n  public getButtonsView(): ContainerI {\n    if (!this.container) {\n      throw new Error('Initialize decoration buttons manager first.');\n    }\n\n    return this.container;\n  }\n}\n","import { injectable } from 'inversify';\nimport AbstractDecorationButton from '../AbstractDecorationButton';\nimport PixiSprite from '../../../../../../lib/2d/sprite/PixiSprite';\nimport { DecorationButtonNames } from '../types/enums';\n\n@injectable()\nexport default class BushDecorationButton extends AbstractDecorationButton {\n  public readonly decorationName: DecorationButtonNames = DecorationButtonNames.bush;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  protected override initialize(): void {\n    this.createChildren();\n    this.subscribe();\n  }\n\n  protected createIcon(): void {\n    const icon = new PixiSprite('gameScreen/icons/bush.png');\n    icon.setScale(0.7, 0.7);\n    icon.enableButtonMode();\n\n    this.spritesContainer.addChild(icon.view);\n  }\n}\n","import { injectable } from 'inversify';\nimport AbstractDecorationButton from '../AbstractDecorationButton';\nimport PixiSprite from '../../../../../../lib/2d/sprite/PixiSprite';\nimport { DecorationButtonNames } from '../types/enums';\n\n@injectable()\nexport default class FlowerDecorationButton extends AbstractDecorationButton {\n  public readonly decorationName: DecorationButtonNames = DecorationButtonNames.flower;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  protected override initialize(): void {\n    this.createChildren();\n    this.subscribe();\n  }\n\n  protected createIcon(): void {\n    const icon = new PixiSprite('gameScreen/icons/flower.png');\n    icon.setScale(0.45, 0.45);\n    icon.enableButtonMode();\n\n    this.spritesContainer.addChild(icon.view);\n  }\n}\n","import { injectable } from 'inversify';\nimport AbstractDecorationButton from '../AbstractDecorationButton';\nimport PixiSprite from '../../../../../../lib/2d/sprite/PixiSprite';\nimport { DecorationButtonNames } from '../types/enums';\n\n@injectable()\nexport default class TreeDecorationButton extends AbstractDecorationButton {\n  public readonly decorationName: DecorationButtonNames = DecorationButtonNames.tree;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  protected override initialize(): void {\n    this.createChildren();\n    this.subscribe();\n  }\n\n  protected createIcon(): void {\n    const icon = new PixiSprite('gameScreen/icons/tree.png');\n    icon.setScale(0.6, 0.6);\n    icon.setTint(this.buttonBackgroundTint);\n    icon.enableButtonMode();\n\n    this.spritesContainer.addChild(icon.view);\n  }\n}\n","import { injectable } from 'inversify';\nimport gsap from 'gsap';\nimport { DecorationPickButtonI } from '../types/interfaces';\nimport AbstractDecorationButton from '../AbstractDecorationButton';\nimport PixiSprite from '../../../../../../lib/2d/sprite/PixiSprite';\nimport { DecorationButtonNames } from '../types/enums';\nimport { DecorationButtonsInteractionEvents } from '../../../../../observables/types/enums';\n\n@injectable()\nexport default class DiscardPickedDecorationButton extends AbstractDecorationButton implements DecorationPickButtonI {\n  public readonly decorationName: DecorationButtonNames = DecorationButtonNames.discard;\n\n  constructor() {\n    super();\n\n    this.initialize();\n  }\n\n  protected override initialize(): void {\n    super.hide();\n    this.spritesContainer.setScale(0, 0);\n    this.createChildren();\n    this.subscribe();\n  }\n\n  public override hide(): void {\n    this.makeNoninteractive();\n    super.hide();\n    this.spritesContainer.setScale(0, 0);\n  }\n\n  public override show(): void {\n    super.show();\n\n    gsap.to(this.spritesContainer.scale, {\n      duration: 0.5,\n      x: 1,\n      y: 1,\n      ease: 'elastic.out(1, 0.5)',\n      onComplete: () => {\n        this.makeInteractive();\n      },\n    });\n  }\n\n  protected override createButtonBackground(): void {\n    const background = new PixiSprite('gameScreen/buttons/simple-button.png');\n    background.enableButtonMode();\n\n    this.spritesContainer.view.addChild(background.view);\n  }\n\n  protected createIcon(): void {\n    const icon = new PixiSprite('gameScreen/icons/discard.png');\n    icon.enableButtonMode();\n    icon.setScale(0.5, 0.5);\n\n    this.spritesContainer.addChild(icon.view);\n  }\n\n  protected override triggerClickEvent(): void {\n    this.interactionObservable.notify(DecorationButtonsInteractionEvents.cancelDecorationButtonClick, this.decorationName);\n  }\n}\n","export enum DecorationButtonNames {\n  bush = 'bush',\n  flower = 'flower',\n  discard = 'discard',\n  tree = 'tree',\n}\n","import { inject, injectable } from 'inversify';\nimport PixiContainer from '../../../../../lib/2d/container/PixiContainer';\nimport { TYPES } from '../../../../../IoC/Types';\nimport PixiSprite from '../../../../../lib/2d/sprite/PixiSprite';\nimport { ThemeModeManagerI, UIThemeModeServiceI } from '../../../../lightModes/types/interfaces';\nimport AbstractButton from '../AbstractButton';\n\n@injectable()\nexport default class LightChangeButton extends AbstractButton {\n  protected readonly themeModeManager: ThemeModeManagerI;\n\n  protected readonly themeModeService: UIThemeModeServiceI;\n\n  constructor(\n  @inject(TYPES.ThemeModeManager) themeModeManager: ThemeModeManagerI,\n    @inject(TYPES.UIThemeModeService) themeModeService: UIThemeModeServiceI,\n  ) {\n    super();\n    this.themeModeManager = themeModeManager;\n    this.themeModeService = themeModeService;\n    this.initialize();\n  }\n\n  protected subscribe(): void {\n    this.onPointerDown(this.onClick.bind(this));\n    this.themeModeService.registerUIElement(this);\n  }\n\n  protected onClick(): void {\n    this.animateClick();\n    this.triggerClickEvent();\n  }\n\n  protected createButtonBackground(): void {\n    this.background = new PixiSprite('gameScreen/buttons/simple-button.png');\n    this.background.enableButtonMode();\n\n    this.spritesContainer.addChild(this.background.view);\n  }\n\n  protected createIcon(): void {\n    const icon = new PixiSprite('gameScreen/icons/light_bulb.png');\n    icon.setScale(0.7, 0.7);\n    icon.enableButtonMode();\n\n    this.spritesContainer.addChild(icon.view);\n  }\n\n  protected createSpritesContainer(): void {\n    this.spritesContainer = new PixiContainer();\n    this.addChild(this.spritesContainer.view);\n  }\n\n  protected prepare(): void {\n    this.makeInteractive();\n    this.enableButtonMode();\n  }\n\n  protected initialize(): void {\n    this.prepare();\n    this.createChildren();\n    this.subscribe();\n  }\n\n  protected createChildren(): void {\n    this.createSpritesContainer();\n    this.createButtonBackground();\n    this.createIcon();\n  }\n\n  protected triggerClickEvent(): void {\n    this.themeModeManager.toggleMode();\n  }\n}\n","import { injectable } from 'inversify';\nimport { HintI, HintIds } from './types/interfaces';\nimport { HintState } from './types/enums';\n\n@injectable()\nexport default abstract class AbstractHint implements HintI {\n  protected state: HintState = HintState.Pending;\n\n  public abstract id: HintIds;\n\n  public abstract display(): void;\n  public abstract hide(): void;\n\n  public abstract initialize(): void;\n\n  public markCompleted(): void {\n    this.state = HintState.Completed;\n  }\n\n  public shouldDisplay(): boolean {\n    return this.state === HintState.Pending;\n  }\n\n  public abstract view: any;\n}\n","import { inject, injectable } from 'inversify';\nimport { ContainerI } from '../../../../lib/2d/types/interfaces';\nimport { MainScene3dI } from '../../../scenes/3d/mainScene3d/types/interfaces';\nimport {\n  Hint2dI, Hint3dI, HintIds, HintsCollection, HintsManagerI,\n} from './types/interfaces';\nimport { HintIds2d, HintIds3d } from './types/enums';\nimport { TYPES } from '../../../../IoC/Types';\n\n@injectable()\nexport default class HintsManager implements HintsManagerI {\n  private readonly hints2D: Map<HintIds, Hint2dI> = new Map();\n\n  private readonly hints3D: Map<HintIds, Hint3dI> = new Map();\n\n  private readonly hintsCollection: HintsCollection;\n\n  constructor(@inject(TYPES.HintsCollection) hintsCollection: HintsCollection) {\n    this.hintsCollection = hintsCollection;\n    this.initialize();\n  }\n\n  private initialize(): void {\n    this.setupHints();\n  }\n\n  private setupHints(): void {\n    this.hintsCollection.hints2d.forEach((hint) => this.hints2D.set(hint.id, hint));\n    this.hintsCollection.hints3d.forEach((hint) => this.hints3D.set(hint.id, hint));\n  }\n\n  public add2DHint(hintId: HintIds2d, container: ContainerI, position: { x: number; y: number }): void {\n    const hint2D = this.hints2D.get(hintId);\n\n    if (!hint2D) {\n      throw new Error(`No 2d hint found with id: ${hintId}`);\n    }\n\n    hint2D.initialize();\n    hint2D.setPosition(position);\n    container.addChild(hint2D.view);\n  }\n\n  public add3DHint(hintId: HintIds3d, scene: MainScene3dI, position: { x: number; y: number; z: number }): void {\n    const hint3D = this.hints3D.get(hintId);\n\n    if (!hint3D) {\n      throw new Error(`No 3d hint found with id: ${hintId}`);\n    }\n\n    hint3D.initialize();\n    hint3D.setPosition(position);\n    scene.addToScene(hint3D.view);\n  }\n\n  public displayHint(hintId: HintIds): void {\n    const hint2D = this.hints2D.get(hintId);\n    if (hint2D && hint2D.shouldDisplay()) {\n      hint2D.display();\n    }\n\n    const hint3D = this.hints3D.get(hintId);\n    if (hint3D && hint3D.shouldDisplay()) {\n      hint3D.display();\n    }\n  }\n\n  public hideHintAsCompleted(hintId: HintIds): void {\n    const hint2D = this.hints2D.get(hintId);\n    if (hint2D) {\n      hint2D.hide();\n      hint2D.markCompleted();\n    }\n\n    const hint3D = this.hints3D.get(hintId);\n    if (hint3D) {\n      hint3D.hide();\n      hint3D.markCompleted();\n    }\n  }\n\n  public hideHintAsNotCompleted(hintId: HintIds): void {\n    const hint2D = this.hints2D.get(hintId);\n    if (hint2D) {\n      hint2D.hide();\n    }\n\n    const hint3D = this.hints3D.get(hintId);\n    if (hint3D) {\n      hint3D.hide();\n    }\n  }\n}\n","import { injectable } from 'inversify';\nimport gsap from 'gsap';\nimport { ContainerI, SpriteI } from '../../../../../lib/2d/types/interfaces';\nimport PixiContainer from '../../../../../lib/2d/container/PixiContainer';\nimport PixiSprite from '../../../../../lib/2d/sprite/PixiSprite';\nimport AbstractHint from '../AbstractHint';\nimport { HintIds2d } from '../types/enums';\nimport { Hint2dI, HintIds } from '../types/interfaces';\n\n@injectable()\nexport default class HintArrow2d extends AbstractHint implements Hint2dI {\n  private arrowSprite: SpriteI;\n\n  private container: ContainerI | null;\n\n  public readonly id: HintIds = HintIds2d.decorationPickHintArrow;\n\n  public initialize(): void {\n    this.createChildren();\n    this.animate();\n    this.hide();\n  }\n\n  private createChildren(): void {\n    this.container = new PixiContainer();\n\n    this.arrowSprite = new PixiSprite('hint/green-arrow.png');\n    this.arrowSprite.setRotation(Math.PI);\n    this.arrowSprite.setScale(0.13, 0.13);\n\n    this.container.addChild(this.arrowSprite.view);\n  }\n\n  private animate(): void {\n    gsap.to(this.arrowSprite.position, {\n      duration: 0.7,\n      x: -50,\n      yoyo: true,\n      ease: 'power1.inOut',\n      repeat: -1,\n    });\n  }\n\n  public get view(): any {\n    if (!this.container) {\n      throw new Error(`Initialize hint first! Hint id - ${this.id}`);\n    }\n\n    return this.container.view;\n  }\n\n  public display(): void {\n    if (!this.container) {\n      return;\n    }\n\n    this.container.visible = true;\n  }\n\n  public hide(): void {\n    if (!this.container) {\n      return;\n    }\n\n    this.container.visible = false;\n  }\n\n  public setPosition(position: { x: number; y: number }): void {\n    if (!this.container) {\n      return;\n    }\n\n    this.container.setPosition(position.x, position.y);\n  }\n}\n","import { injectable } from 'inversify';\nimport * as THREE from 'three';\nimport gsap from 'gsap';\nimport AbstractHint from '../AbstractHint';\nimport { HintIds3d } from '../types/enums';\nimport ModelsCache from '../../../../../assetsLoaders/ModelsCache';\nimport { Hint3dI, HintIds } from '../types/interfaces';\n\n@injectable()\nexport default class HintArrow3d extends AbstractHint implements Hint3dI {\n  public readonly id: HintIds = HintIds3d.decorationTargetAreaHintArrow;\n\n  private hintModel: THREE.Group<THREE.Object3DEventMap> | THREE.Object3D<THREE.Object3DEventMap> | null;\n\n  private animationStarted: boolean = false;\n\n  public initialize(): void {\n    this.createChildren();\n    this.animate();\n    this.hide();\n  }\n\n  private createChildren(): void {\n    this.hintModel = ModelsCache.getModel('hint-arrow.fbx');\n    this.hintModel.scale.set(0.004, 0.004, 0.004);\n    this.hintModel.rotation.y = Math.PI / 2;\n    this.hintModel.visible = false;\n  }\n\n  private animate(): void {\n    if (this.animationStarted || !this.hintModel) {\n      return;\n    }\n\n    this.animationStarted = true;\n\n    gsap.to(this.hintModel.position, {\n      duration: 0.7,\n      y: 0.2,\n      yoyo: true,\n      ease: 'power1.inOut',\n      repeat: -1,\n    });\n  }\n\n  public get view(): any {\n    if (!this.hintModel) {\n      throw new Error(`Initialize hint first! Hint id - ${this.id}`);\n    }\n\n    return this.hintModel;\n  }\n\n  public display(): void {\n    if (!this.hintModel) {\n      return;\n    }\n\n    this.hintModel.visible = true;\n    this.animate();\n  }\n\n  public hide(): void {\n    if (!this.hintModel) {\n      return;\n    }\n\n    this.hintModel.visible = false;\n  }\n\n  public setPosition(position: { x: number; y: number; z: number }): void {\n    if (!this.hintModel) {\n      return;\n    }\n\n    this.hintModel.position.set(position.x, position.y, position.z);\n  }\n}\n","export enum HintState {\n  Pending,\n  Displayed,\n  Completed,\n}\n\nexport enum HintIds2d {\n  decorationPickHintArrow,\n}\n\nexport enum HintIds3d {\n  decorationTargetAreaHintArrow,\n}\n","import { inject, injectable } from 'inversify';\nimport { DraggableDecorationNames } from './types/enums';\nimport { DraggableDecoration3dI, DraggableDecorations3dManagerI } from './types/interfaces';\nimport { TYPES } from '../../../../IoC/Types';\nimport { DraggableDecorations3dCollection } from './types/types';\n\n@injectable()\nexport default class DraggableDecorations3dManager implements DraggableDecorations3dManagerI {\n  private readonly draggableDecorations: Map<DraggableDecorationNames, DraggableDecoration3dI>;\n\n  constructor(@inject(TYPES.DraggableDecorations3dCollection) draggableDecorations: DraggableDecorations3dCollection) {\n    this.draggableDecorations = new Map(\n      Object.entries(draggableDecorations) as [DraggableDecorationNames, DraggableDecoration3dI][],\n    );\n  }\n\n  public getDraggableDecorationByName(name: DraggableDecorationNames): DraggableDecoration3dI {\n    const decoration = this.draggableDecorations.get(name);\n\n    if (!decoration) {\n      throw new Error(`Decoration with name \"${name}\" not found.`);\n    }\n\n    return decoration;\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { StaticDecorations3dManagerI } from './types/interfaces';\nimport { TYPES } from '../../../../IoC/Types';\nimport { StaticDecorations3dCollection } from './types/types';\nimport { MainScene3dI } from '../../../scenes/3d/mainScene3d/types/interfaces';\nimport { Elements3dThemeModeServiceI } from '../../../lightModes/types/interfaces';\n\n@injectable()\nexport default class StaticDecorations3dManager implements StaticDecorations3dManagerI {\n  private readonly decorations: StaticDecorations3dCollection;\n\n  private readonly scene: MainScene3dI;\n\n  private readonly themeModeService: Elements3dThemeModeServiceI;\n\n  constructor(\n  @inject(TYPES.StaticDecorations3dCollection) decorations: StaticDecorations3dCollection,\n    @inject(TYPES.MainScene3d) scene: MainScene3dI,\n    @inject(TYPES.Elements3dThemeModeService) themeModeService: Elements3dThemeModeServiceI,\n  ) {\n    this.decorations = decorations;\n    this.scene = scene;\n    this.themeModeService = themeModeService;\n  }\n\n  public setupDecorations(): void {\n    this.decorations.forEach((decoration) => {\n      this.scene.addToScene(decoration.getDecoration());\n      this.themeModeService.registerElement(decoration);\n    });\n  }\n}\n","import { injectable } from 'inversify';\nimport { Group, Object3D, Object3DEventMap } from 'three';\nimport gsap from 'gsap';\nimport { DraggableDecoration3dI } from '../types/interfaces';\nimport { DraggableDecorationNames } from '../types/enums';\n\n@injectable()\nexport default abstract class AbstractDraggableDecoration implements DraggableDecoration3dI {\n  public abstract name: DraggableDecorationNames;\n\n  protected decorationModel: Group<Object3DEventMap> | Object3D<Object3DEventMap>;\n\n  protected decorationHitArea: Object3D<Object3DEventMap>;\n\n  public animatePlacing(): void {}\n\n  public getDecoration(): any {\n    if (!this.decorationModel) {\n      this.createDecoration();\n    }\n\n    return this.decorationModel;\n  }\n\n  public abstract createDecoration(): void;\n\n  protected abstract createDecorationHitArea(): void;\n\n  public getDecorationHitArea(): Object3D<Object3DEventMap> {\n    if (!this.decorationHitArea) {\n      this.createDecorationHitArea();\n    }\n\n    return this.decorationHitArea;\n  }\n\n  public animatePlacingDecorationOnScene(): void {\n    const scaleModifierValue: number = 0.001;\n    const yScale = this.decorationModel.scale.y;\n    const timeline = gsap.timeline({ repeat: 0 }); // No repeat, only one cycle\n\n    timeline.to(this.decorationModel.scale, {\n      duration: 0.15,\n      y: yScale - scaleModifierValue,\n      ease: 'bounce.in',\n    });\n\n    timeline.to(this.decorationModel.scale, {\n      duration: 0.3,\n      y: yScale,\n      ease: 'bounce.out',\n    });\n  }\n}\n","import { injectable } from 'inversify';\nimport {\n  BoxGeometry, Color, Mesh, MeshStandardMaterial,\n} from 'three';\nimport ModelsCache from '../../../../../../assetsLoaders/ModelsCache';\nimport AbstractDraggableDecoration from '../AbstractDraggableDecoration';\nimport { DraggableDecorationNames } from '../../types/enums';\n\n@injectable()\nexport default class BushDecoration extends AbstractDraggableDecoration {\n  public name = DraggableDecorationNames.bush;\n\n  public createDecoration(): void {\n    const bush = ModelsCache.getModel('BushWithBerrys.fbx');\n    bush.scale.set(0.007, 0.007, 0.007);\n\n    this.decorationModel = bush;\n  }\n\n  protected override createDecorationHitArea(): void {\n    const height = 0.5;\n    const geometry = new BoxGeometry(0.8, height, 0.8);\n    const material = new MeshStandardMaterial({ color: new Color(1, 1, 1) });\n\n    this.decorationHitArea = new Mesh(geometry, material);\n    this.decorationHitArea.visible = false;\n    this.decorationHitArea.position.set(0, height / 2, 0);\n  }\n}\n","import { injectable } from 'inversify';\nimport {\n  BoxGeometry, Color, Mesh, MeshStandardMaterial,\n} from 'three';\nimport ModelsCache from '../../../../../../assetsLoaders/ModelsCache';\nimport AbstractDraggableDecoration from '../AbstractDraggableDecoration';\nimport { DraggableDecorationNames } from '../../types/enums';\n\n@injectable()\nexport default class FlowerDecoration extends AbstractDraggableDecoration {\n  public name = DraggableDecorationNames.flower;\n\n  public readonly hitAreaHeight = 0.2;\n\n  public createDecoration(): void {\n    const flower = ModelsCache.getModel('flower.fbx');\n\n    flower.scale.set(0.005, 0.005, 0.005);\n\n    this.decorationModel = flower;\n  }\n\n  protected override createDecorationHitArea(): void {\n    const height = 0.7;\n    const geometry = new BoxGeometry(0.2, height, 0.2);\n    const material = new MeshStandardMaterial({ color: new Color(1, 1, 1) });\n\n    this.decorationHitArea = new Mesh(geometry, material);\n    this.decorationHitArea.visible = false;\n    this.decorationHitArea.position.set(0, height / 2, 0);\n  }\n}\n","import { injectable } from 'inversify';\nimport {\n  BoxGeometry, Color, Mesh, MeshStandardMaterial,\n} from 'three';\nimport ModelsCache from '../../../../../../assetsLoaders/ModelsCache';\nimport AbstractDraggableDecoration from '../AbstractDraggableDecoration';\nimport { DraggableDecorationNames } from '../../types/enums';\n\n@injectable()\nexport default class TreeDecoration extends AbstractDraggableDecoration {\n  public name = DraggableDecorationNames.tree;\n\n  public createDecoration(): void {\n    const tree = ModelsCache.getModel('Tree.fbx');\n\n    tree.scale.set(0.015, 0.015, 0.015);\n\n    this.decorationModel = tree;\n  }\n\n  protected override createDecorationHitArea(): void {\n    const height = 0.6;\n    const geometry = new BoxGeometry(0.5, height, 0.5);\n    const material = new MeshStandardMaterial({ color: new Color(1, 1, 1) });\n\n    this.decorationHitArea = new Mesh(geometry, material);\n    this.decorationHitArea.visible = false;\n    this.decorationHitArea.position.set(0, height / 2, 0);\n  }\n}\n","import { Group, Object3DEventMap, Object3D } from 'three';\nimport { injectable } from 'inversify';\nimport { StaticDecoration3dI } from '../types/interfaces';\nimport { ThemedElementI } from '../../../../lightModes/types/interfaces';\nimport { LightModes } from '../../../../lightModes/types/enums';\n\n@injectable()\nexport default abstract class AbstractStaticDecoration implements StaticDecoration3dI, ThemedElementI {\n  public abstract getDecoration(): Group<Object3DEventMap> | Object3D<Object3DEventMap>;\n\n  public applyTheme(lightMode: LightModes): void {\n    if (lightMode === LightModes.day) {\n      this.setDayMode();\n    } else {\n      this.setNightMode();\n    }\n  }\n\n  protected abstract setNightMode(): void;\n\n  protected abstract setDayMode(): void;\n}\n","import { inject, injectable } from 'inversify';\nimport { Sky } from 'three/examples/jsm/objects/Sky';\nimport * as THREE from 'three';\nimport { TYPES } from '../../../../../../IoC/Types';\nimport { GraphicsEngine3dI } from '../../../../../../engines/types/interfaces';\nimport AbstractStaticDecoration from '../AbstractStaticDecoration';\n\n@injectable()\nexport default class SkyBackground extends AbstractStaticDecoration {\n  private readonly renderer: THREE.WebGLRenderer;\n\n  private sky: Sky | undefined;\n\n  constructor(@inject(TYPES.Engine3d) engine3d: GraphicsEngine3dI) {\n    super();\n    this.renderer = engine3d.getRenderer();\n  }\n\n  protected setDayMode(): void {\n    if (!this.sky) {\n      return;\n    }\n\n    const { uniforms } = this.sky.material;\n    uniforms.turbidity.value = 5;\n    uniforms.rayleigh.value = 3;\n  }\n\n  protected setNightMode(): void {\n    if (!this.sky) {\n      return;\n    }\n\n    const { uniforms } = this.sky.material;\n    uniforms.turbidity.value = 1;\n    uniforms.rayleigh.value = 10;\n  }\n\n  public getDecoration(): any {\n    this.sky = new Sky();\n    this.sky.scale.setScalar(450000);\n\n    const sun = new THREE.Vector3();\n    const effects = {\n      turbidity: 5,\n      rayleigh: 3,\n      mieCoefficient: 0.005,\n      mieDirectionalG: 0.7,\n      elevation: 2,\n      azimuth: 180,\n      exposure: this.renderer.toneMappingExposure,\n    };\n\n    const { uniforms } = this.sky.material;\n    uniforms.turbidity.value = effects.turbidity;\n    uniforms.rayleigh.value = effects.rayleigh;\n    uniforms.mieCoefficient.value = effects.mieCoefficient;\n    uniforms.mieDirectionalG.value = effects.mieDirectionalG;\n\n    const phi = THREE.MathUtils.degToRad(90 - effects.elevation);\n    const theta = THREE.MathUtils.degToRad(effects.azimuth);\n\n    sun.setFromSphericalCoords(1, phi, theta);\n\n    uniforms.sunPosition.value.copy(sun);\n\n    this.renderer.toneMappingExposure = effects.exposure;\n\n    return this.sky;\n  }\n}\n","import { injectable } from 'inversify';\nimport * as THREE from 'three';\nimport ModelsCache from '../../../../../../assetsLoaders/ModelsCache';\nimport AbstractStaticDecoration from '../AbstractStaticDecoration';\n\n@injectable()\nexport default class HouseDecoration extends AbstractStaticDecoration {\n  private house: THREE.Group | THREE.Object3D;\n\n  private nightLights: THREE.Light[] = [];\n\n  private dayLights: THREE.Light[] = [];\n\n  private setupLights(): void {\n    const nightLightNames: string[] = ['Sun', 'Sun001', 'Sun002'];\n    const dayLightNames: string[] = ['Light', 'Light001'];\n\n    this.nightLights = this.getLightsByName(nightLightNames);\n    this.dayLights = this.getLightsByName(dayLightNames);\n  }\n\n  private getLightsByName(names: string[]): THREE.Light[] {\n    return names.map((nightLightName) => {\n      const light = this.house.getObjectByName(nightLightName);\n\n      if (!light) {\n        throw new Error(`Light not found, supplied name: ${nightLightName}`);\n      }\n\n      return light as THREE.Light;\n    });\n  }\n\n  public getDecoration(): any {\n    this.house = ModelsCache.getModel('House.fbx');\n    this.house.scale.set(0.01, 0.01, 0.01);\n    this.house.position.y = 1;\n    this.house.position.z = -2;\n    this.house.rotation.y = -Math.PI / 2;\n    this.setupLights();\n\n    return this.house;\n  }\n\n  public setNightMode(): void {\n    const light1 = this.house.getObjectByName('Sun') as THREE.Light;\n    const light2 = this.house.getObjectByName('Sun001') as THREE.Light;\n    const light3 = this.house.getObjectByName('Sun002') as THREE.Light;\n\n    light1.intensity = 0;\n    light2.intensity = 200;\n    light3.intensity = 350;\n\n    this.dayLights.forEach((light) => (light.visible = false));\n    this.nightLights.forEach((light) => (light.visible = true));\n  }\n\n  public setDayMode(): void {\n    const light1 = this.house.getObjectByName('Light') as THREE.Light;\n    const light2 = this.house.getObjectByName('Light001') as THREE.Light;\n\n    light1.intensity = 10;\n    light2.intensity = 400;\n\n    this.dayLights.forEach((light) => (light.visible = true));\n    this.nightLights.forEach((light) => (light.visible = false));\n  }\n}\n","export enum DraggableDecorationNames {\n  bush = 'bush',\n  flower = 'flower',\n  tree = 'tree',\n}\n","import { inject, injectable } from 'inversify';\nimport { DragControllerI, DragStateI } from './types/interfaces';\nimport { TYPES } from '../../../../IoC/Types';\nimport { MultipleValuesObservableI } from '../../../../lib/observable/types/interfaces';\nimport { GraphicsEngine3dI } from '../../../../engines/types/interfaces';\nimport { GameProcessEvents } from '../../../observables/types/enums';\nimport IdleState from './states/IdleState';\nimport { DraggableDecoration3dI } from '../decorations/types/interfaces';\nimport { DecorationTargetAreaI } from '../targetArea/types/interfaces';\n\n@injectable()\nexport class DragController implements DragControllerI {\n  private state: DragStateI;\n\n  constructor(\n  @inject(TYPES.Engine3d) engine3d: GraphicsEngine3dI,\n    @inject(TYPES.GameProcessObservable) gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>,\n  ) {\n    this.state = new IdleState(engine3d, gameProcessObservable, this);\n  }\n\n  public setDraggable(draggable: DraggableDecoration3dI): void {\n    this.state.setDraggable(draggable);\n  }\n\n  public unsetDraggable(): void {\n    this.state.unsetDraggable();\n  }\n\n  public setTargetAreas(targetAreas: DecorationTargetAreaI[]): void {\n    this.state.setTargetAreas(targetAreas);\n  }\n\n  public changeState(newState: DragStateI): void {\n    this.state = newState;\n  }\n}\n","import * as THREE from 'three';\nimport { DragControllerI, DragStateI } from '../types/interfaces';\nimport { DecorationTargetAreaI } from '../../targetArea/types/interfaces';\nimport { MultipleValuesObservableI } from '../../../../../lib/observable/types/interfaces';\nimport { GameProcessEvents } from '../../../../observables/types/enums';\nimport { DraggableDecoration3dI } from '../../decorations/types/interfaces';\nimport { GraphicsEngine3dI } from '../../../../../engines/types/interfaces';\nimport IdleState from './IdleState';\n\nexport default class DragState implements DragStateI {\n  private draggableModel: THREE.Object3D | null;\n\n  private hitAreas: THREE.Object3D[];\n\n  private targetAreas: DecorationTargetAreaI[];\n\n  private selected: THREE.Object3D | null = null;\n\n  protected engine3d: GraphicsEngine3dI;\n\n  private readonly camera: THREE.Camera;\n\n  private readonly domElement: HTMLElement;\n\n  private readonly plane: THREE.Plane;\n\n  private readonly offset: THREE.Vector3;\n\n  private readonly intersection: THREE.Vector3;\n\n  private readonly raycaster: THREE.Raycaster;\n\n  private readonly mouse: THREE.Vector2;\n\n  private readonly gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>;\n\n  private readonly context: DragControllerI;\n\n  private onPointerDownCb = this.onPointerDown.bind(this);\n\n  private onPointerMoveCb = this.onPointerMove.bind(this);\n\n  private onPointerUpCb = this.onPointerUp.bind(this);\n\n  constructor(\n    engine3d: GraphicsEngine3dI,\n    gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>,\n    context: DragControllerI,\n    draggable: DraggableDecoration3dI,\n  ) {\n    this.engine3d = engine3d;\n    this.camera = engine3d.getCamera();\n    this.domElement = document.getElementById('2d-view-container') as HTMLElement;\n    this.plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);\n    this.offset = new THREE.Vector3();\n    this.intersection = new THREE.Vector3();\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.gameProcessObservable = gameProcessObservable;\n    this.context = context;\n    this.draggableModel = draggable.getDecoration();\n    this.hitAreas = [draggable.getDecorationHitArea()];\n\n    this.subscribeForDomEvents();\n  }\n\n  public setDraggable(): void {\n    // Already dragging\n  }\n\n  public unsetDraggable(): void {\n    this.draggableModel = null;\n    this.hitAreas = [];\n    this.targetAreas = [];\n    this.unsubscribeForDomEvents();\n    this.context.changeState(new IdleState(this.engine3d, this.gameProcessObservable, this.context));\n  }\n\n  public setTargetAreas(targetAreas: DecorationTargetAreaI[]): void {\n    this.targetAreas = [...targetAreas];\n  }\n\n  private subscribeForDomEvents(): void {\n    this.domElement.addEventListener('pointerdown', this.onPointerDownCb, false);\n    this.domElement.addEventListener('pointermove', this.onPointerMoveCb, false);\n    this.domElement.addEventListener('pointerup', this.onPointerUpCb, false);\n  }\n\n  private unsubscribeForDomEvents(): void {\n    this.domElement.removeEventListener('pointerdown', this.onPointerDownCb, false);\n    this.domElement.removeEventListener('pointermove', this.onPointerMoveCb, false);\n    this.domElement.removeEventListener('pointerup', this.onPointerUpCb, false);\n  }\n\n  private onPointerDown(event: MouseEvent): void {\n    event.preventDefault();\n    this.updateMouse(event);\n\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    const intersects = this.raycaster.intersectObjects(this.hitAreas, true);\n\n    if (intersects.length > 0) {\n      this.selected = intersects[0].object;\n      this.plane.setFromNormalAndCoplanarPoint(new THREE.Vector3(0, 1, 0), this.selected.position);\n      this.raycaster.ray.intersectPlane(this.plane, this.intersection);\n      this.offset.copy(this.intersection).sub(this.selected.position);\n    }\n  }\n\n  private onPointerMove(event: MouseEvent): void {\n    if (!this.selected) return;\n\n    event.preventDefault();\n    this.updateMouse(event);\n\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    if (this.raycaster.ray.intersectPlane(this.plane, this.intersection)) {\n      const newPosition = this.intersection.clone().sub(this.offset);\n      this.clampPosition(newPosition);\n      this.updateSelectedPosition(newPosition);\n    }\n  }\n\n  private onPointerUp(event: MouseEvent): void {\n    if (!this.selected) return;\n\n    event.preventDefault();\n    this.checkIfDecorationPlaced();\n    this.selected = null;\n  }\n\n  private checkIfDecorationPlaced(): void {\n    this.targetAreas.forEach((targetArea) => {\n      if (!targetArea.disabled && this.isWithinTargetArea(targetArea)) {\n        targetArea.disableForever();\n        this.onSuccessfulDecorationPlace(targetArea);\n      }\n    });\n  }\n\n  private isWithinTargetArea(targetArea: DecorationTargetAreaI): boolean {\n    if (!this.selected) {\n      return false;\n    }\n\n    const { position: targetAreaPosition, geometry } = targetArea.getDecorationTargetArea();\n\n    const dx = this.selected.position.x - targetAreaPosition.x;\n    const dz = this.selected.position.z - targetAreaPosition.z;\n    const distance = Math.sqrt(dx * dx + dz * dz);\n\n    const { outerRadius } = (geometry as THREE.RingGeometry).parameters;\n\n    return distance <= outerRadius;\n  }\n\n  private onSuccessfulDecorationPlace(targetArea: DecorationTargetAreaI): void {\n    this.updateSelectedPosition(targetArea.getDecorationTargetArea().position);\n    this.unsetDraggable();\n    this.gameProcessObservable.notify(GameProcessEvents.decorationSuccessfullyPlaced, null);\n  }\n\n  private updateSelectedPosition(position: THREE.Vector3): void {\n    if (this.selected) {\n      this.selected.position.copy(position);\n    }\n\n    if (this.draggableModel) {\n      const modelPosition = new THREE.Vector3().copy(position);\n      modelPosition.y = this.draggableModel.position.y;\n\n      this.draggableModel.position.copy(modelPosition);\n    }\n  }\n\n  private clampPosition(position: THREE.Vector3): void {\n    const minX = -2.4;\n    const maxX = 2;\n    const minZ = -0.7;\n    const maxZ = 0.5;\n    const modifiedPosition = new THREE.Vector3().copy(position);\n\n    if (position.x < minX) modifiedPosition.x = minX;\n    if (position.x > maxX) modifiedPosition.x = maxX;\n    if (position.z < minZ) modifiedPosition.z = minZ;\n    if (position.z > maxZ) modifiedPosition.z = maxZ;\n\n    position.copy(modifiedPosition);\n  }\n\n  private updateMouse(event: MouseEvent): void {\n    const rect = this.domElement.getBoundingClientRect();\n    this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n    this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n  }\n}\n","import { DraggableDecoration3dI } from '../../decorations/types/interfaces';\nimport { DragControllerI, DragStateI } from '../types/interfaces';\nimport { GraphicsEngine3dI } from '../../../../../engines/types/interfaces';\nimport { MultipleValuesObservableI } from '../../../../../lib/observable/types/interfaces';\nimport { GameProcessEvents } from '../../../../observables/types/enums';\nimport DragState from './DragState';\n\nexport default class IdleState implements DragStateI {\n  protected engine3d: GraphicsEngine3dI;\n\n  protected gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>;\n\n  protected context: DragControllerI;\n\n  constructor(\n    engine3d: GraphicsEngine3dI,\n    gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>,\n    context: DragControllerI,\n  ) {\n    this.engine3d = engine3d;\n    this.gameProcessObservable = gameProcessObservable;\n    this.context = context;\n  }\n\n  public setDraggable(draggable: DraggableDecoration3dI): void {\n    this.context.changeState(new DragState(this.engine3d, this.gameProcessObservable, this.context, draggable));\n  }\n\n  public unsetDraggable(): void {\n    // Nothing to do in Idle state\n  }\n\n  public setTargetAreas(): void {\n    // Nothing to do in Idle state\n  }\n}\n","import { injectable } from 'inversify';\nimport { Light } from 'three';\nimport ThreeLight from '../../../../lib/3d/light/ThreeLight';\nimport { ThemedLightI } from '../../../lightModes/types/interfaces';\nimport { LightModes } from '../../../lightModes/types/enums';\n\n@injectable()\nexport default abstract class AbstractLight extends ThreeLight implements ThemedLightI {\n  protected abstract override light: Light;\n\n  public applyTheme(lightMode: LightModes): void {\n    if (lightMode === LightModes.day) {\n      this.applyDayTheme();\n    } else {\n      this.applyNightTheme();\n    }\n  }\n\n  protected abstract applyDayTheme(): void;\n\n  protected abstract applyNightTheme(): void;\n}\n","import * as THREE from 'three';\nimport { injectable } from 'inversify';\nimport { Light } from 'three';\nimport AbstractLight from './AbstractLight';\n\n@injectable()\nexport default class AmbientLight extends AbstractLight {\n  protected override light: Light = new THREE.AmbientLight(0xffffff, 0.3);\n\n  protected applyDayTheme(): void {\n    this.light.color.set(0xffffff);\n    this.light.intensity = 1;\n  }\n\n  protected applyNightTheme(): void {\n    this.light.color.set(0x222244);\n    this.light.intensity = 10;\n  }\n}\n","import * as THREE from 'three';\nimport { injectable } from 'inversify';\nimport AbstractLight from './AbstractLight';\n\n@injectable()\nexport default class FillLight extends AbstractLight {\n  protected override light: THREE.HemisphereLight = new THREE.HemisphereLight(0x87ceeb, 0x444444, 0.4);\n\n  protected applyDayTheme(): void {\n    this.light.color.set(0xffffff);\n    this.light.groundColor.set(0xfaa0a0);\n    this.light.intensity = 1;\n  }\n\n  protected applyNightTheme(): void {\n    this.light.color.set(0xc3b1e1);\n    this.light.groundColor.set(0x7f00ff);\n    this.light.intensity = 10;\n  }\n}\n","import * as THREE from 'three';\nimport { injectable } from 'inversify';\nimport { Light } from 'three';\nimport AbstractLight from './AbstractLight';\n\n@injectable()\nexport default class MainLight extends AbstractLight {\n  protected override light: Light = new THREE.DirectionalLight(0xffffff, 0.1);\n\n  constructor() {\n    super();\n    this.light.castShadow = true;\n  }\n\n  protected applyDayTheme(): void {\n    this.light.color.set(0xffffff);\n    this.light.intensity = 30;\n    this.light.position.set(50, 100, 50);\n  }\n\n  protected applyNightTheme(): void {\n    this.light.color.set(0x333366);\n    this.light.intensity = 20;\n    this.light.position.set(-50, 50, -50);\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { SceneLightsManagerI } from './types/interfaces';\nimport { TYPES } from '../../../../IoC/Types';\nimport { Elements3dThemeModeServiceI, ThemedLightI } from '../../../lightModes/types/interfaces';\n\n@injectable()\nexport default class SceneLightsManager implements SceneLightsManagerI {\n  private readonly lights: ThemedLightI[];\n\n  constructor(\n  @inject(TYPES.SceneLightsCollection) lights: ThemedLightI[],\n    @inject(TYPES.Elements3dThemeModeService) lightModeService: Elements3dThemeModeServiceI,\n  ) {\n    this.lights = lights;\n    this.lights.forEach((light) => lightModeService.registerElement(light));\n  }\n\n  public getSceneLights(): any[] {\n    // return this.lights.map((light) => light.view);\n    return [];\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { SceneDecorationControllerI } from './types/interfaces';\nimport { DraggableDecorationNames } from '../decorations/types/enums';\nimport { TYPES } from '../../../../IoC/Types';\nimport { MainScene3dI } from '../../../scenes/3d/mainScene3d/types/interfaces';\nimport { DecorationTargetAreasControllerI } from '../targetArea/types/interfaces';\nimport { DecorationButtonNames } from '../../2d/buttons/decoration/types/enums';\nimport { DraggableDecoration3dI, DraggableDecorations3dManagerI } from '../decorations/types/interfaces';\nimport { DragControllerI } from '../dragControls/types/interfaces';\nimport { MultipleValuesObservableI } from '../../../../lib/observable/types/interfaces';\nimport { DecorationButtonsInteractionEvents, GameProcessEvents } from '../../../observables/types/enums';\nimport { HintsManagerI } from '../../2d/hint/types/interfaces';\nimport { HintIds3d } from '../../2d/hint/types/enums';\n\n@injectable()\nexport default class SceneDecorationController implements SceneDecorationControllerI {\n  private readonly scene: MainScene3dI;\n\n  private readonly targetAreasController: DecorationTargetAreasControllerI;\n\n  private currentDecoration: DraggableDecoration3dI | null = null;\n\n  private readonly draggableDecorationsManager: DraggableDecorations3dManagerI;\n\n  private readonly dragController: DragControllerI;\n\n  private readonly decorationButtonsInteractionObservable: MultipleValuesObservableI<\n  DecorationButtonsInteractionEvents,\n  DecorationButtonNames\n  >;\n\n  private readonly gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>;\n\n  private readonly hintsManager: HintsManagerI;\n\n  constructor(\n  @inject(TYPES.MainScene3d) scene: MainScene3dI,\n    @inject(TYPES.DecorationTargetAreasController) targetAreasController: DecorationTargetAreasControllerI,\n    @inject(TYPES.DraggableDecorations3dManager) draggableDecorations3dManager: DraggableDecorations3dManagerI,\n    @inject(TYPES.DragController) dragController: DragControllerI,\n    @inject(TYPES.DecorationButtonsInteractionObservable)\n    decorationButtonsInteractionObservable: MultipleValuesObservableI<\n    DecorationButtonsInteractionEvents,\n    DecorationButtonNames\n    >,\n    @inject(TYPES.GameProcessObservable) gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>,\n    @inject(TYPES.HintsManager) hintsManager: HintsManagerI,\n  ) {\n    this.decorationButtonsInteractionObservable = decorationButtonsInteractionObservable;\n    this.scene = scene;\n    this.gameProcessObservable = gameProcessObservable;\n    this.targetAreasController = targetAreasController;\n    this.draggableDecorationsManager = draggableDecorations3dManager;\n    this.dragController = dragController;\n    this.hintsManager = hintsManager;\n  }\n\n  public enableSceneDecoration(): void {\n    this.addTargetAreasToScene();\n    this.subscribe();\n  }\n\n  private subscribe(): void {\n    this.decorationButtonsInteractionObservable.subscribe(\n      DecorationButtonsInteractionEvents.decorationButtonClick,\n      this.onDecorationPick,\n      this,\n    );\n\n    this.decorationButtonsInteractionObservable.subscribe(\n      DecorationButtonsInteractionEvents.cancelDecorationButtonClick,\n      this.onDecorationCancel,\n      this,\n    );\n\n    this.gameProcessObservable.subscribe(\n      GameProcessEvents.decorationSuccessfullyPlaced,\n      this.onDecorationSuccessfulPlacing,\n      this,\n    );\n  }\n\n  private onDecorationPick(decorationButtonName: DecorationButtonNames): void {\n    switch (decorationButtonName) {\n      case DecorationButtonNames.tree:\n        this.currentDecoration = this.draggableDecorationsManager.getDraggableDecorationByName(\n          DraggableDecorationNames.tree,\n        );\n        break;\n      case DecorationButtonNames.bush:\n        this.currentDecoration = this.draggableDecorationsManager.getDraggableDecorationByName(\n          DraggableDecorationNames.bush,\n        );\n        break;\n      case DecorationButtonNames.flower:\n        this.currentDecoration = this.draggableDecorationsManager.getDraggableDecorationByName(\n          DraggableDecorationNames.flower,\n        );\n        break;\n      default:\n        throw new Error(`Unknown decoration button Name: ${decorationButtonName}`);\n    }\n\n    if (this.currentDecoration) {\n      this.scene.addToScene(this.currentDecoration.getDecoration());\n      this.scene.addToScene(this.currentDecoration.getDecorationHitArea());\n      this.currentDecoration.animatePlacingDecorationOnScene();\n      this.dragController.setDraggable(this.currentDecoration);\n      this.dragController.setTargetAreas(this.targetAreasController.getDecorationTargetAreas());\n      this.targetAreasController.displayTargetAreas();\n      this.displayHint();\n    }\n  }\n\n  private displayHint(): void {\n    const hintedTargetAreaPosition = this.targetAreasController.getDecorationTargetAreas()[1].position;\n    const hintPosition = {\n      x: hintedTargetAreaPosition.x,\n      y: hintedTargetAreaPosition.y + 0.5,\n      z: hintedTargetAreaPosition.z,\n    };\n    this.hintsManager.add3DHint(HintIds3d.decorationTargetAreaHintArrow, this.scene, hintPosition);\n    this.hintsManager.displayHint(HintIds3d.decorationTargetAreaHintArrow);\n  }\n\n  private onDecorationCancel(): void {\n    if (this.currentDecoration) {\n      this.scene.removeFromScene(this.currentDecoration.getDecoration());\n      this.scene.removeFromScene(this.currentDecoration.getDecorationHitArea());\n      this.targetAreasController.hideTargetAreas();\n      this.hintsManager.hideHintAsNotCompleted(HintIds3d.decorationTargetAreaHintArrow);\n      this.currentDecoration = null;\n    }\n  }\n\n  private addTargetAreasToScene(): void {\n    this.targetAreasController.getDecorationTargetAreas().forEach((targetArea) => {\n      this.scene.addToScene(targetArea.getDecorationTargetArea());\n    });\n\n    this.targetAreasController.hideTargetAreas();\n  }\n\n  private onDecorationSuccessfulPlacing(): void {\n    this.targetAreasController.hideTargetAreas();\n    this.hintsManager.hideHintAsCompleted(HintIds3d.decorationTargetAreaHintArrow);\n\n    if (this.currentDecoration) {\n      this.currentDecoration?.animatePlacingDecorationOnScene();\n      this.currentDecoration = null;\n    }\n\n    if (this.targetAreasController.getNumberOfActiveTargetAreas() === 0) {\n      this.gameProcessObservable.notify(GameProcessEvents.allDecorationsSuccessfullyPlaced, null);\n    }\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { DecorationTargetAreaI, DecorationTargetAreasControllerI } from './types/interfaces';\nimport { TYPES } from '../../../../IoC/Types';\nimport { DecorationTargetAreasCollection } from './types/types';\n\n@injectable()\nexport default class DecorationTargetAreasController implements DecorationTargetAreasControllerI {\n  private readonly targetAreas: DecorationTargetAreasCollection;\n\n  private readonly targetAreasPositions: { x: number; y: number; z: number }[] = [\n    { x: 1, y: 0.05, z: -0.2 },\n    { x: -1, y: 0.06, z: -0.3 },\n    { x: -2, y: 0.04, z: -0.4 },\n  ];\n\n  constructor(@inject(TYPES.DecorationTargetAreaCollection) targetAreas: DecorationTargetAreasCollection) {\n    this.targetAreas = targetAreas;\n  }\n\n  public displayTargetAreas(): void {\n    this.targetAreas.forEach((targetArea) => targetArea.display());\n  }\n\n  public hideTargetAreas(): void {\n    this.targetAreas.forEach((targetArea) => targetArea.hide());\n  }\n\n  public getDecorationTargetAreas(): DecorationTargetAreaI[] {\n    this.targetAreas.forEach((targetArea, index) => {\n      targetArea.setPosition(this.targetAreasPositions[index]);\n    });\n\n    return this.targetAreas;\n  }\n\n  public getNumberOfActiveTargetAreas(): number {\n    return this.targetAreas.filter((targetArea) => !targetArea.disabled).length;\n  }\n}\n","import * as THREE from 'three';\nimport { injectable } from 'inversify';\nimport gsap from 'gsap';\nimport { DecorationTargetAreaI } from '../types/interfaces';\n\n@injectable()\nexport default class DecorationTargetArea implements DecorationTargetAreaI {\n  private targetArea: THREE.Mesh;\n\n  public disabled: boolean = false;\n\n  constructor() {\n    this.initialize();\n  }\n\n  private initialize(): void {\n    this.createTargetArea();\n    this.runIdleAnimation();\n  }\n\n  private getShaderMaterial(): THREE.ShaderMaterial {\n    const color1 = new THREE.Color(0xffc1c1);\n    const color2 = new THREE.Color(0xfff8b8);\n    const color3 = new THREE.Color(0xb8ffb8);\n    const color4 = new THREE.Color(0xb8d8ff);\n    const color5 = new THREE.Color(0xd8b8ff);\n\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        color1: { value: color1 },\n        color2: { value: color2 },\n        color3: { value: color3 },\n        color4: { value: color4 },\n        color5: { value: color5 },\n      },\n      vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n      fragmentShader: `\n    uniform vec3 color1;\n    uniform vec3 color2;\n    uniform vec3 color3;\n    uniform vec3 color4;\n    uniform vec3 color5;\n    varying vec2 vUv;\n\n    void main() {\n      float angle = atan(vUv.y - 0.5, vUv.x - 0.5) + 3.1415926; // shift from -π to π -> 0 to 2π\n      float normalizedAngle = angle / (2.0 * 3.1415926); // Normalize between 0 and 1\n\n      vec3 gradientColor;\n\n      if (normalizedAngle < 0.2) {\n        gradientColor = mix(color1, color2, normalizedAngle / 0.2);\n      } else if (normalizedAngle < 0.4) {\n        gradientColor = mix(color2, color3, (normalizedAngle - 0.2) / 0.2);\n      } else if (normalizedAngle < 0.6) {\n        gradientColor = mix(color3, color4, (normalizedAngle - 0.4) / 0.2);\n      } else if (normalizedAngle < 0.8) {\n        gradientColor = mix(color4, color5, (normalizedAngle - 0.6) / 0.2);\n      } else {\n        gradientColor = mix(color5, color1, (normalizedAngle - 0.8) / 0.2); // Wrap back to the first color\n      }\n\n      gl_FragColor = vec4(gradientColor, 1.0);\n    }\n  `,\n      side: THREE.DoubleSide,\n    });\n  }\n\n  private getGeometry(): THREE.RingGeometry {\n    const radius = 0.3;\n\n    return new THREE.RingGeometry(radius - 0.1, radius, 64);\n  }\n\n  private createTargetArea(): void {\n    const mesh = new THREE.Mesh(this.getGeometry(), this.getShaderMaterial());\n    mesh.rotation.x = -Math.PI / 2;\n\n    this.targetArea = mesh;\n  }\n\n  private runIdleAnimation(): void {\n    gsap.to(this.targetArea.rotation, {\n      z: '+=6.2832',\n      duration: 4,\n      ease: 'linear',\n      repeat: -1,\n    });\n\n    gsap.to(this.targetArea.scale, {\n      x: 1.2,\n      y: 1.2,\n      z: 1.2,\n      duration: 1,\n      ease: 'sine.inOut',\n      yoyo: true,\n      repeat: -1,\n    });\n  }\n\n  public getDecorationTargetArea(): THREE.Mesh {\n    return this.targetArea;\n  }\n\n  public setPosition(position: { x: number; y: number; z: number }): void {\n    this.targetArea.position.set(position.x, position.y, position.z);\n  }\n\n  public hide(): void {\n    this.targetArea.visible = false;\n  }\n\n  public display(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.targetArea.visible = true;\n  }\n\n  public disableForever(): void {\n    this.hide();\n    this.disabled = true;\n  }\n\n  public get position(): { x: number; y: number; z: number } {\n    return this.targetArea.position;\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { GameI } from './types/interfaces';\nimport { TYPES } from '../../IoC/Types';\nimport { AssetLoadersManagerI } from '../../assetsLoaders/types/interfaces';\nimport { MainScene2dI } from '../scenes/2d/mainScene2d/types/interfaces';\nimport { SceneNames2d } from '../scenes/2d/types/enums';\nimport { StaticDecorations3dManagerI } from '../components/3d/decorations/types/interfaces';\nimport SceneDecorationController from '../components/3d/sceneDecorator/SceneDecorationController';\nimport { ThemeModeManagerI } from '../lightModes/types/interfaces';\nimport { LightModes } from '../lightModes/types/enums';\n\n@injectable()\nexport default class Game implements GameI {\n  private readonly assetsLoader: AssetLoadersManagerI;\n\n  private readonly main2dScene: MainScene2dI;\n\n  private readonly decorations3d: StaticDecorations3dManagerI;\n\n  private readonly sceneDecorationController: SceneDecorationController;\n\n  private readonly themeModeManager: ThemeModeManagerI;\n\n  constructor(\n  @inject(TYPES.AssetLoadersManager) assetsLoader: AssetLoadersManagerI,\n    @inject(TYPES.MainScene2d) mainScene2d: MainScene2dI,\n    @inject(TYPES.Decorations3dManager) decorations3d: StaticDecorations3dManagerI,\n    @inject(TYPES.SceneDecorationController) sceneDecorationController: SceneDecorationController,\n    @inject(TYPES.ThemeModeManager) themeModeManager: ThemeModeManagerI,\n  ) {\n    this.assetsLoader = assetsLoader;\n    this.main2dScene = mainScene2d;\n    this.decorations3d = decorations3d;\n    this.sceneDecorationController = sceneDecorationController;\n    this.themeModeManager = themeModeManager;\n  }\n\n  public async preloadSplashScreen(): Promise<void> {\n    await this.assetsLoader.loadSpecific2dAssets([\n      {\n        alias: 'splashScreen/background.jpg',\n        src: 'assets/2d/splashScreen/background.jpg',\n      },\n      {\n        alias: 'splashScreen/rotate.png',\n        src: 'assets/2d/splashScreen/rotate.png',\n      },\n    ]);\n  }\n\n  public async preloadAllAssets(): Promise<void> {\n    await this.assetsLoader.loadAllAssets();\n  }\n\n  public showSplashScreen(): void {\n    this.main2dScene.showScene(SceneNames2d.splash);\n  }\n\n  public removeSplashScreen(): void {\n    this.main2dScene.destroyScene(SceneNames2d.splash);\n  }\n\n  public prepare3dScene(): void {\n    this.decorations3d.setupDecorations();\n    this.themeModeManager.setMode(LightModes.day);\n  }\n\n  public async startGameSetup(): Promise<void> {\n    await this.preloadSplashScreen();\n    this.showSplashScreen();\n    await this.preloadAllAssets();\n    this.prepare3dScene();\n  }\n\n  public startGame(): void {\n    this.removeSplashScreen();\n    this.main2dScene.showScene(SceneNames2d.game);\n    this.sceneDecorationController.enableSceneDecoration();\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { ThemeModeManagerI, ThemeModeServiceI } from './types/interfaces';\nimport { LightModes } from './types/enums';\nimport { TYPES } from '../../IoC/Types';\nimport { ThemeModeServicesCollection } from './types/types';\n\n@injectable()\nexport class ThemeModeManager implements ThemeModeManagerI {\n  private mode: LightModes = LightModes.day;\n\n  private readonly listeners: ThemeModeServiceI[] = [];\n\n  constructor(@inject(TYPES.ThemeModeServices) themeModeServices: ThemeModeServicesCollection) {\n    this.listeners.push(...themeModeServices);\n  }\n\n  public toggleMode(): void {\n    this.mode = this.mode === LightModes.day ? LightModes.night : LightModes.day;\n    this.notifyListeners();\n  }\n\n  public setMode(lightMode: LightModes): void {\n    this.mode = lightMode;\n    this.notifyListeners();\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach((listener) => listener.toggleMode(this.mode));\n  }\n\n  public get currentMode(): LightModes {\n    return this.mode;\n  }\n}\n","import { injectable } from 'inversify';\nimport { Elements3dThemeModeServiceI, ThemedElementI } from '../types/interfaces';\nimport { LightModes } from '../types/enums';\n\n@injectable()\nexport class Elements3dThemeModeService implements Elements3dThemeModeServiceI {\n  private readonly lights: ThemedElementI[] = [];\n\n  public registerElement(element: ThemedElementI): void {\n    this.lights.push(element);\n  }\n\n  public toggleMode(lightMode: LightModes): void {\n    this.lights.forEach((element) => element.applyTheme(lightMode));\n  }\n}\n","import { injectable } from 'inversify';\nimport { ThemedUIElementI, UIThemeModeServiceI } from '../types/interfaces';\nimport { LightModes } from '../types/enums';\n\n@injectable()\nexport class UIThemeModeService implements UIThemeModeServiceI {\n  private readonly uiElements: ThemedUIElementI[] = [];\n\n  public registerUIElement(element: ThemedUIElementI): void {\n    this.uiElements.push(element);\n  }\n\n  public toggleMode(lightMode: LightModes): void {\n    this.uiElements.forEach((element) => element.applyTheme(lightMode));\n  }\n}\n","export enum LightModes {\n  day = 'day',\n  night = 'night',\n}\n","import { injectable } from 'inversify';\nimport AbstractMultipleValuesObservable from '../../lib/observable/AbstractMultipleValuesObservable';\nimport { DecorationButtonsInteractionEvents } from './types/enums';\nimport { DecorationButtonNames } from '../components/2d/buttons/decoration/types/enums';\n\n@injectable()\nexport default class DecorationButtonsInteractionObservable extends AbstractMultipleValuesObservable<\nDecorationButtonsInteractionEvents,\nDecorationButtonNames\n> {\n  public getData(): any {\n    return {};\n  }\n}\n","import { injectable } from 'inversify';\nimport AbstractMultipleValuesObservable from '../../lib/observable/AbstractMultipleValuesObservable';\nimport { GameProcessEvents } from './types/enums';\n\n@injectable()\nexport default class GameProcessObservable extends AbstractMultipleValuesObservable<GameProcessEvents, null> {\n  public getData(): any {\n    return {};\n  }\n}\n","import { injectable } from 'inversify';\nimport AbstractObservable from '../../lib/observable/AbstractObservable';\nimport { ResizeData } from './types/types';\n\n@injectable()\nexport default class ResizeObservable extends AbstractObservable<ResizeData> {\n  constructor() {\n    super();\n    window.addEventListener('resize', this.onResize.bind(this));\n  }\n\n  protected onResize(): void {\n    this.notify(this.getData());\n  }\n\n  public getData(): ResizeData {\n    return {\n      screenWidth: window.innerWidth,\n      screenHeight: window.innerHeight,\n    };\n  }\n}\n","export enum DecorationButtonsInteractionEvents {\n  decorationButtonClick = 'decorationButtonClick',\n  cancelDecorationButtonClick = 'cancelDecorationButtonClick',\n  changeLightningButtonClick = 'changeLightningButtonClick',\n}\n\nexport enum GameProcessEvents {\n  decorationSuccessfullyPlaced = 'decorationSuccessfullyPlaced',\n  allDecorationsSuccessfullyPlaced = 'allDecorationsSuccessfullyPlaced',\n}\n","import { inject, injectable } from 'inversify';\nimport { ContainerI, Scene2dI } from '../../../../lib/2d/types/interfaces';\nimport { SceneNames2d } from '../types/enums';\nimport PixiScene from '../../../../lib/2d/scene/PixiScene';\nimport { TYPES } from '../../../../IoC/Types';\nimport { DecorationButtonsManagerI } from '../../../components/2d/buttons/decoration/types/interfaces';\nimport { ObservableI } from '../../../../lib/observable/types/interfaces';\nimport { ResizeData } from '../../../observables/types/types';\n\n@injectable()\nexport default class GameScene extends PixiScene implements Scene2dI {\n  private readonly changeLightButton: ContainerI;\n\n  private readonly decorationButtonsManager: DecorationButtonsManagerI;\n\n  private readonly resizeObservable: ObservableI<ResizeData>;\n\n  constructor(\n  @inject(TYPES.ChangeLightButton) changeLightButton: ContainerI,\n    @inject(TYPES.DecorationButtonsManager) decorationButtonsManager: DecorationButtonsManagerI,\n    @inject(TYPES.ResizeObservable) resizeObservable: ObservableI<ResizeData>,\n  ) {\n    super();\n    this.decorationButtonsManager = decorationButtonsManager;\n    this.changeLightButton = changeLightButton;\n    this.resizeObservable = resizeObservable;\n    this.initialize();\n  }\n\n  private initialize(): void {\n    this.createChildren();\n    this.subscribe();\n    this.resize();\n  }\n\n  private subscribe(): void {\n    this.resizeObservable.subscribe(this.resize, this);\n  }\n\n  private createChildren(): void {\n    this.changeLightButton.setScale(0.35, 0.35);\n    this.addChild(this.decorationButtonsManager.getButtonsView().view, this.changeLightButton.view);\n  }\n\n  public get sceneName(): string {\n    return SceneNames2d.game;\n  }\n\n  private resize(): void {\n    const { screenWidth, screenHeight } = this.resizeObservable.getData();\n\n    const buttonsView = this.decorationButtonsManager.getButtonsView();\n    buttonsView.setPosition(screenWidth / 2 - 80, screenHeight / 2 - 370);\n\n    this.changeLightButton.setPosition(-screenWidth / 2 + 80, -screenHeight / 2 + 80);\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { SceneNames2d } from '../types/enums';\nimport { MainScene2dI } from './types/interfaces';\nimport { Scenes2dByNames, Scenes2dGetter } from '../types/types';\nimport { TYPES } from '../../../../IoC/Types';\nimport { Scene2dI } from '../../../../lib/2d/types/interfaces';\nimport PixiScene from '../../../../lib/2d/scene/PixiScene';\nimport { MultipleValuesObservableI } from '../../../../lib/observable/types/interfaces';\nimport { GameProcessEvents } from '../../../observables/types/enums';\n\n@injectable()\nexport default class MainScene2d extends PixiScene implements MainScene2dI {\n  private readonly scenesGetter: Scenes2dGetter;\n\n  private activeScenes: Scenes2dByNames = {};\n\n  private readonly gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>;\n\n  constructor(\n  @inject(TYPES.Scenes2dGetter) scenesGetter: Scenes2dGetter,\n    @inject(TYPES.GameProcessObservable) gameProcessObservable: MultipleValuesObservableI<GameProcessEvents, null>,\n  ) {\n    super();\n    this.scenesGetter = scenesGetter;\n    this.gameProcessObservable = gameProcessObservable;\n    this.subscribe();\n  }\n\n  private subscribe(): void {\n    this.gameProcessObservable.subscribe(GameProcessEvents.allDecorationsSuccessfullyPlaced, this.showOutro, this);\n  }\n\n  private showOutro(): void {\n    this.showScene(SceneNames2d.outro);\n  }\n\n  public get sceneName(): string {\n    return SceneNames2d.main;\n  }\n\n  private getActiveSceneByName(name: SceneNames2d): Scene2dI | never {\n    const scene = this.activeScenes[name];\n\n    if (!scene) {\n      throw new Error(`No scene with name ${name} found.`);\n    }\n\n    return scene;\n  }\n\n  public showScene(name: SceneNames2d): void {\n    const scene = this.scenesGetter(name);\n    scene.show();\n\n    this.activeScenes[name] = scene;\n\n    this.addChild(scene.view);\n  }\n\n  public hideScene(name: SceneNames2d): void {\n    const scene = this.getActiveSceneByName(name);\n    scene.hide();\n  }\n\n  public destroyScene(name: SceneNames2d): void {\n    const scene = this.getActiveSceneByName(name);\n    scene.destroy();\n  }\n}\n","import { injectable } from 'inversify';\nimport gsap from 'gsap';\nimport * as PIXI from 'pixi.js';\nimport { Scene2dI } from '../../../../lib/2d/types/interfaces';\nimport { SceneNames2d } from '../types/enums';\nimport PixiScene from '../../../../lib/2d/scene/PixiScene';\nimport PixiSprite from '../../../../lib/2d/sprite/PixiSprite';\n\n@injectable()\nexport default class OutroScene extends PixiScene implements Scene2dI {\n  constructor() {\n    super();\n\n    this.initialize();\n  }\n\n  public override show(): void {\n    super.show();\n    this.animateSceneAppearance();\n  }\n\n  private animateSceneAppearance(): void {\n    this.alpha = 0;\n\n    gsap.to(this.view, {\n      alpha: 1,\n      duration: 2,\n    });\n  }\n\n  public get sceneName(): string {\n    return SceneNames2d.outro;\n  }\n\n  private initialize(): void {\n    this.hide();\n    this.createChildren();\n  }\n\n  private createChildren(): void {\n    this.createBackground();\n    this.createGameLogo();\n    this.createDownloadButton();\n  }\n\n  private createGameLogo(): void {\n    const logo = new PixiSprite('outroScreen/game-icon.png');\n    logo.setScale(0.2, 0.2);\n    logo.setPositionY(-100);\n\n    this.addChild(logo.view);\n  }\n\n  private createBackground(): void {\n    const graphic = new PIXI.Graphics();\n\n    graphic.rect(0, 0, window.innerWidth + 20, window.innerHeight);\n    graphic.fill(0x000000);\n    graphic.pivot.set(window.innerWidth / 2, window.innerHeight / 2);\n    graphic.alpha = 0.5;\n\n    this.addChild(graphic);\n  }\n\n  private createDownloadButton(): void {\n    const textStyle = new PIXI.TextStyle({\n      fontFamily: 'Arial',\n      fontSize: 96,\n      fontStyle: 'italic',\n      fontWeight: 'bold',\n      fill: '#ffffff',\n      dropShadow: {\n        color: '#000000',\n        blur: 4,\n        angle: Math.PI / 6,\n        distance: 6,\n      },\n    });\n    const text = new PIXI.Text({ text: 'DOWNLOAD', style: textStyle });\n    text.anchor.set(0.5);\n\n    const button = new PixiSprite('outroScreen/download-button.png');\n    button.setScale(0.3, 0.3);\n    button.setPositionY(100);\n    button.enableButtonMode();\n    button.onPointerDown(this.onDownloadButtonClick.bind(this));\n\n    gsap.to(button.scale, {\n      x: 0.4,\n      y: 0.4,\n      duration: 1.5,\n      yoyo: true,\n      ease: 'sine.inOut',\n      repeat: -1,\n    });\n\n    button.addChild(text);\n    this.addChild(button.view);\n  }\n\n  private onDownloadButtonClick(): void {\n    window.location.href = 'https://play.google.com/store/apps?hl=uk';\n  }\n}\n","import gsap from 'gsap';\nimport { Scene2dI } from '../../../../lib/2d/types/interfaces';\nimport { SceneNames2d } from '../types/enums';\nimport PixiScene from '../../../../lib/2d/scene/PixiScene';\nimport PixiSprite from '../../../../lib/2d/sprite/PixiSprite';\n\nexport default class SplashScene extends PixiScene implements Scene2dI {\n  private readonly animations: gsap.core.Tween[] = [];\n\n  constructor() {\n    super();\n\n    this.initialize();\n  }\n\n  public get sceneName(): string {\n    return SceneNames2d.splash;\n  }\n\n  private initialize(): void {\n    this.hide();\n    this.createChildren();\n  }\n\n  private createBackground(): void {\n    const background = new PixiSprite('splashScreen/background.jpg');\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n\n    const scale = Math.max(screenWidth / background.width, screenHeight / background.height);\n\n    background.setScale(scale, scale);\n\n    this.addChild(background.view);\n  }\n\n  private createLoader(): void {\n    const loader = new PixiSprite('splashScreen/rotate.png');\n    loader.setPositionY(-100);\n    loader.setScale(0.3, 0.3);\n\n    const rotationAnimation = gsap.to(loader.view, {\n      rotation: 360 * (Math.PI / 180),\n      duration: 2,\n      ease: 'none',\n      repeat: -1,\n    });\n\n    this.animations.push(rotationAnimation);\n    this.addChild(loader.view);\n  }\n\n  public override destroy(): void {\n    const fadeAnimation = gsap.to(this.view, {\n      alpha: 0,\n      duration: 2,\n      onComplete: () => {\n        this.animations.push(fadeAnimation);\n        this.destroyAllAnimations();\n        super.destroy();\n      },\n    });\n  }\n\n  private destroyAllAnimations(): void {\n    this.animations.forEach((animation) => {\n      animation.kill();\n    });\n  }\n\n  private createChildren(): void {\n    this.createBackground();\n    this.createLoader();\n  }\n}\n","export enum SceneNames2d {\n  splash = 'splash',\n  main = 'main',\n  game = 'game',\n  outro = 'outro',\n}\n","import { inject, injectable } from 'inversify';\nimport * as THREE from 'three';\nimport { MainScene3dI } from './types/interfaces';\nimport { TYPES } from '../../../../IoC/Types';\nimport { GraphicsEngine3dI } from '../../../../engines/types/interfaces';\nimport { SceneLightsManagerI } from '../../../components/3d/lights/types/interfaces';\n\n@injectable()\nexport default class MainScene3d implements MainScene3dI {\n  private readonly scene: THREE.Scene;\n\n  private readonly lightsManager: SceneLightsManagerI;\n\n  constructor(\n  @inject(TYPES.Engine3d) engine3d: GraphicsEngine3dI,\n    @inject(TYPES.SceneLightsManager) lightsManager: SceneLightsManagerI,\n  ) {\n    this.scene = engine3d.scene;\n    this.lightsManager = lightsManager;\n\n    this.addLights();\n  }\n\n  private addLights(): void {\n    this.lightsManager.getSceneLights().forEach((light) => {\n      this.addToScene(light);\n    });\n  }\n\n  public addToScene(obj: any): void {\n    this.scene.add(obj);\n  }\n\n  public removeFromScene(obj: any): void {\n    this.scene.remove(obj);\n  }\n}\n","import * as PIXI from 'pixi.js';\nimport { inject, injectable } from 'inversify';\nimport { GraphicsEngineI } from '../types/interfaces';\nimport { TYPES } from '../../IoC/Types';\nimport { MainScene2dI } from '../../core/scenes/2d/mainScene2d/types/interfaces';\nimport { ObservableI } from '../../lib/observable/types/interfaces';\nimport { ResizeData } from '../../core/observables/types/types';\n\n@injectable()\nexport default class Pixi2dEngine implements GraphicsEngineI {\n  private readonly app: PIXI.Application;\n\n  private readonly mainScene2d: MainScene2dI;\n\n  private readonly resizeObservable: ObservableI<ResizeData>;\n\n  constructor(\n  @inject(TYPES.MainScene2d) mainScene: MainScene2dI,\n    @inject(TYPES.ResizeObservable) resizeObservable: ObservableI<ResizeData>,\n  ) {\n    this.app = new PIXI.Application();\n    this.mainScene2d = mainScene;\n    this.resizeObservable = resizeObservable;\n  }\n\n  private appendViewIntoContainer(): void {\n    const container = document.getElementById('2d-view-container');\n\n    if (!container) {\n      throw new Error('No container for 2d engine canvas found.');\n    }\n\n    container.appendChild(this.app.renderer.canvas);\n  }\n\n  private stopDefaultTicker(): void {\n    PIXI.Ticker.shared.stop();\n  }\n\n  private addMainSceneToStage(): void {\n    this.app.stage.addChild(this.mainScene2d.view);\n  }\n\n  private async createApp(): Promise<void> {\n    const { screenWidth, screenHeight } = this.resizeObservable.getData();\n\n    await this.app.init({\n      width: window.innerWidth,\n      height: window.innerHeight,\n      backgroundAlpha: 0,\n    });\n    this.appendViewIntoContainer();\n\n    this.app.stage.position.set(screenWidth / 2, screenHeight / 2);\n  }\n\n  private subscribe(): void {\n    this.resizeObservable.subscribe(this.resize, this);\n  }\n\n  public async initialize(): Promise<void> {\n    this.stopDefaultTicker();\n\n    await this.createApp();\n\n    this.addMainSceneToStage();\n\n    this.subscribe();\n  }\n\n  public update(time: number, deltaTime: number): void {\n    this.app.ticker.update(deltaTime);\n  }\n\n  private resize(): void {\n    const { screenWidth, screenHeight } = this.resizeObservable.getData();\n    this.app.renderer.resize(screenWidth, screenHeight);\n\n    this.app.stage.position.set(screenWidth / 2, screenHeight / 2);\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport * as THREE from 'three';\nimport { GraphicsEngine3dI } from '../types/interfaces';\nimport { TYPES } from '../../IoC/Types';\nimport { ObservableI } from '../../lib/observable/types/interfaces';\nimport { ResizeData } from '../../core/observables/types/types';\n\n@injectable()\nexport default class Three3dEngine implements GraphicsEngine3dI {\n  private readonly scene3d: THREE.Scene;\n\n  private camera: THREE.PerspectiveCamera;\n\n  private renderer: THREE.WebGLRenderer;\n\n  private readonly resizeObservable: ObservableI<ResizeData>;\n\n  constructor(@inject(TYPES.ResizeObservable) resizeObservable: ObservableI<ResizeData>) {\n    this.resizeObservable = resizeObservable;\n    this.scene3d = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n  }\n\n  private appendViewIntoContainer(): void {\n    const container = document.getElementById('3d-view-container');\n\n    if (!container) {\n      throw new Error('No container for 3d engine canvas found.');\n    }\n\n    container.appendChild(this.renderer.domElement);\n  }\n\n  private setupRenderer(): void {\n    const { screenWidth, screenHeight } = this.resizeObservable.getData();\n\n    this.renderer.setSize(screenWidth, screenHeight);\n  }\n\n  private setupCamera(): void {\n    this.camera.position.z = 3;\n    this.camera.position.y = 1.2;\n    this.camera.position.x = -3;\n    this.camera.lookAt(new THREE.Vector3(-1.2, 0.7, 0));\n  }\n\n  private subscribe(): void {\n    this.resizeObservable.subscribe(this.resize, this);\n  }\n\n  public async initialize(): Promise<void> {\n    this.setupRenderer();\n    this.setupCamera();\n    this.appendViewIntoContainer();\n    this.subscribe();\n    this.resize();\n  }\n\n  public update(): void {\n    this.renderer.render(this.scene3d, this.camera);\n  }\n\n  public get scene(): THREE.Scene {\n    return this.scene3d;\n  }\n\n  public getRenderer(): THREE.WebGLRenderer {\n    return this.renderer;\n  }\n\n  public getCamera(): any {\n    return this.camera;\n  }\n\n  private resize(): void {\n    const { screenWidth, screenHeight } = this.resizeObservable.getData();\n\n    this.camera.aspect = screenWidth / screenHeight;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(screenWidth, screenHeight);\n  }\n}\n","import { injectable } from 'inversify';\nimport gsap from 'gsap';\nimport { UpdateEngineI } from '../types/interfaces';\nimport { TickerCB } from '../types/types';\n\n@injectable()\nexport default class GsapUpdateEngine implements UpdateEngineI {\n  public initialize(): void {\n    gsap.ticker.wake();\n  }\n\n  public addCallbackToUpdateLoop(cb: TickerCB): void {\n    gsap.ticker.add(cb);\n  }\n}\n","import { injectable } from 'inversify';\nimport { GameEntryI } from './types/interfaces';\n\n@injectable()\nexport default abstract class AbstractGameEntry implements GameEntryI {\n  public abstract run(): void;\n}\n","import { inject, injectable } from 'inversify';\nimport AbstractGameEntry from '../AbstractGameEntry';\nimport { GameEntryI } from '../types/interfaces';\nimport { TYPES } from '../../IoC/Types';\nimport { AppI } from '../../app/types/interfaces';\n\n@injectable()\nexport default class DefaultGameEntry extends AbstractGameEntry implements GameEntryI {\n  private readonly gameApp: AppI;\n\n  constructor(@inject(TYPES.App) gameApp: AppI) {\n    super();\n\n    this.gameApp = gameApp;\n  }\n\n  public run(): void {\n    this.gameApp.runGame();\n  }\n}\n","import { Container } from 'pixi.js';\nimport { injectable } from 'inversify';\nimport { ContainerI } from '../types/interfaces';\n\n@injectable()\nexport default class PixiContainer implements ContainerI {\n  protected container: Container<any>;\n\n  constructor() {\n    this.container = new Container();\n    this.container.interactive = true;\n  }\n\n  public setRotation(rotation: number): void {\n    this.container.rotation = rotation;\n  }\n\n  public get scale(): { x: number; y: number } {\n    return this.container.scale;\n  }\n\n  public get position(): { x: number; y: number } {\n    return this.container.position;\n  }\n\n  public setTint(tint: number): void {\n    this.container.tint = tint;\n  }\n\n  public enableButtonMode(): void {\n    this.container.cursor = 'pointer';\n  }\n\n  public disableButtonMode(): void {\n    this.container.cursor = '';\n  }\n\n  public makeNoninteractive(): void {\n    this.container.interactive = false;\n  }\n\n  public makeInteractive(): void {\n    this.container.interactive = true;\n  }\n\n  public show(): void {\n    this.container.visible = true;\n  }\n\n  public hide(): void {\n    this.container.visible = false;\n  }\n\n  public destroy(): void {\n    this.container.destroy();\n  }\n\n  public addChild(...children: any[]): void {\n    this.container.addChild(...children);\n  }\n\n  public removeChildren(...children: any[]): void {\n    this.container.removeChild(...children);\n  }\n\n  public get view(): any {\n    return this.container;\n  }\n\n  public setScale(x: number, y: number): void {\n    this.container.scale.set(x, y);\n  }\n\n  public setPosition(x: number, y: number): void {\n    this.container.position.set(x, y);\n  }\n\n  public setPositionY(y: number): void {\n    this.container.position.y = y;\n  }\n\n  public setPositionX(x: number): void {\n    this.container.position.x = x;\n  }\n\n  public get width(): number {\n    return this.container.width;\n  }\n\n  public get height(): number {\n    return this.container.height;\n  }\n\n  public onPointerDown(cb: (...args: any) => any): void {\n    this.container.on('pointerdown', cb);\n  }\n\n  public offPointerDown(cb: (...args: any) => any): void {\n    this.container.off('pointerdown', cb);\n  }\n\n  public get alpha(): number {\n    return this.container.alpha;\n  }\n\n  public set alpha(value: number) {\n    this.container.alpha = value;\n  }\n\n  public get visible(): boolean {\n    return this.container.visible;\n  }\n\n  public set visible(isVisible: boolean) {\n    this.container.visible = isVisible;\n  }\n}\n","import PixiContainer from '../container/PixiContainer';\nimport { Scene2dI } from '../types/interfaces';\n\nexport default abstract class PixiScene extends PixiContainer implements Scene2dI {\n  public abstract get sceneName(): string;\n}\n","import { Sprite, Texture } from 'pixi.js';\nimport { SpriteI } from '../types/interfaces';\nimport PixiContainer from '../container/PixiContainer';\n\nexport default class PixiSprite extends PixiContainer implements SpriteI {\n  protected override container: Sprite;\n\n  constructor(textureName?: string) {\n    super();\n    if (textureName) {\n      this.container = new Sprite(Texture.from(textureName));\n    } else {\n      this.container = new Sprite();\n    }\n\n    this.container.anchor.set(0.5);\n    this.container.interactive = true;\n  }\n\n  public setAnchor(x: number, y: number): void {\n    this.container.anchor.set(x, y);\n  }\n}\n","import { Color, Light } from 'three';\nimport { injectable } from 'inversify';\nimport { LightI } from './types/interfaces';\n\n@injectable()\nexport default class ThreeLight implements LightI {\n  protected readonly light: Light;\n\n  public setPosition(x: number, y: number, z: number): void {\n    this.light.position.set(x, y, z);\n  }\n\n  public setColor(color: number): void {\n    this.light.color = new Color(color);\n  }\n\n  public setIntensity(intensity: number): void {\n    this.light.intensity = intensity;\n  }\n\n  public setCastShadow(cast: boolean): void {\n    this.light.castShadow = cast;\n  }\n\n  public lookAt(x: number, y: number, z: number): void {\n    this.light.lookAt(x, y, z);\n  }\n\n  public get view(): any {\n    return this.light;\n  }\n}\n","import { injectable } from 'inversify';\nimport { MultipleValuesObservableI } from './types/interfaces';\n\n@injectable()\nexport default abstract class AbstractMultipleValuesObservable<TEventType extends string | number | symbol, TData>\nimplements MultipleValuesObservableI<TEventType, TData> {\n  private observers: Map<TEventType, Array<{ callback: (data: TData) => void; context?: any }>> = new Map();\n\n  public subscribe(eventType: TEventType, callback: (data: TData) => void, context?: any): void {\n    if (!this.observers.has(eventType)) {\n      this.observers.set(eventType, []);\n    }\n    this.observers.get(eventType)!.push({ callback, context });\n  }\n\n  public unsubscribe(eventType: TEventType, callback: (data: TData) => void, context?: any): void {\n    const observersForEvent = this.observers.get(eventType);\n    if (observersForEvent) {\n      for (let i = 0; i < observersForEvent.length; i++) {\n        const observer = observersForEvent[i];\n        if (observer.callback === callback && observer.context === context) {\n          observersForEvent.splice(i, 1);\n          break;\n        }\n      }\n      if (observersForEvent.length === 0) {\n        this.observers.delete(eventType);\n      }\n    }\n  }\n\n  public notify(eventType: TEventType, data: TData): void {\n    const observersForEvent = this.observers.get(eventType);\n    if (observersForEvent) {\n      observersForEvent.forEach((observer) => {\n        if (observer.context) {\n          observer.callback.call(observer.context, data);\n        } else {\n          observer.callback(data);\n        }\n      });\n    }\n  }\n\n  abstract getData(eventType: TEventType): TData;\n}\n","import { injectable } from 'inversify';\nimport { ObservableI } from './types/interfaces';\n\n@injectable()\nexport default abstract class AbstractObservable<T> implements ObservableI<T> {\n  private observers: Array<{ callback: (data: T) => void; context?: any }> = [];\n\n  public subscribe(callback: (data: T) => void, context?: any): void {\n    this.observers.push({ callback, context });\n  }\n\n  public unsubscribe(callback: (data: T) => void, context?: any): void {\n    for (let i = 0; i < this.observers.length; i++) {\n      const observer = this.observers[i];\n      if (observer.callback === callback && observer.context === context) {\n        this.observers.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  protected notify(data: T): void {\n    this.observers.forEach((observer) => {\n      if (observer.context) {\n        observer.callback.call(observer.context, data);\n      } else {\n        observer.callback(data);\n      }\n    });\n  }\n\n  public abstract getData(): T;\n}\n","import 'reflect-metadata';\nimport './style.css';\nimport dotenv from 'dotenv';\nimport { GameEntryI } from './game/gameEntry/types/interfaces';\nimport IoCDependenciesContainer from './game/IoC/IoCDependenciesContainer';\nimport { TYPES } from './game/IoC/Types';\n\nconst dependenciesContainer = new IoCDependenciesContainer();\n\nfunction prepare(): void {\n  dotenv.config();\n  dependenciesContainer.loadDependencies();\n}\n\nfunction initializeGame(): GameEntryI {\n  return dependenciesContainer.get<() => GameEntryI>(TYPES.GameEntryFactory)();\n}\n\nfunction runGame(): void {\n  prepare();\n\n  const gameEntry: GameEntryI = initializeGame();\n\n  gameEntry.run();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  runGame();\n});\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","undefined","IoCDependenciesContainer","Container","modules","gameEntryModule","engineModule2d","engineModule3d","updateEngineModule","appModule","scenes2dModule","assetLoadersModule","gameModule","scene3dModule","decorations3dModule","buttons2dModule","targetAreasModule","dragControlsModule","themesModule","lightsModule","observablesModule","hintsModule","loadDependencies","this","load","TYPES","GameEntryFactory","Symbol","for","Engine2d","Engine3d","UpdateEngine","App","MainScene2d","MainScene3d","Scenes2dGetter","AssetLoader3d","AssetLoader2d","AssetLoadersManager","Game","StaticDecorations3dCollection","DraggableDecorations3dManager","DraggableDecorations3dCollection","Decorations3dManager","DecorationsPick2dButtonsCollection","ChangeLightButton","DecorationButtonsManager","SceneLightsManager","SceneLightsCollection","DecorationTargetAreasController","DecorationTargetAreaCollection","SceneDecorationController","DragController","HintsCollection","HintsManager","ThemeModeManager","Elements3dThemeModeService","UIThemeModeService","ThemeModeServices","GameProcessObservable","DecorationButtonsInteractionObservable","ResizeObservable","ContainerModule","bind","toDynamicValue","context","DecorationButtonNames","bush","container","resolve","tree","flower","discard","to","toFactory","scenesByNames","SceneNames2d","splash","outro","game","sceneName","scene","Error","inSingletonScope","DraggableDecorationNames","collection","i","targetArea","hints2d","hints3d","get","constructor","engine2d","engine3d","updateEngine","runGame","setupEngines","startGameSetup","startGame","initialize","addCallbackToUpdateLoop","update","injectable","inject","assetLoader3d","assetLoader2d","loadAllAssets","loadSpecific2dAssets","data","loadSpecificAssets","loadSpecific3dAssets","AssetsLoader2d","loadedAssetsNames","assets","filteredAssets","filter","el","includes","alias","assetNames","map","asset","forEach","Assets","add","AssetsLoader3d","fbxLoader","FBXLoader","objLoader","OBJLoader","mtlLoader","MTLLoader","textureLoader","THREE","TextureLoader","promises","assetData","loadModel","Promise","all","then","models","addModel","model","name","reject","extension","src","split","pop","toLowerCase","loadFBX","catch","loadOBJ","fbx","textures","traverse","child","Mesh","material","normal","normalMap","needsUpdate","error","mtl","materials","preload","setMaterials","loadOBJModel","url","obj","ModelsCache","modelName","getModel","AbstractButton","spritesContainer","clickAnimationFinished","buttonBackgroundTint","applyTheme","lightMode","LightModes","day","setDayMode","setNightMode","background","setTint","animateClick","scale","duration","x","y","ease","yoyo","repeat","onComplete","AbstractDecorationButton","super","disabledForever","makeInteractive","enableButtonMode","addChild","view","subscribe","onPointerDown","onClick","triggerClickEvent","createChildren","createButtonBackground","createIcon","interactionObservable","notify","DecorationButtonsInteractionEvents","decorationButtonClick","decorationName","disableForever","disable","makeNoninteractive","disableButtonMode","enable","decorationPickButtons","hintsManager","themeModeService","gameProcessObservable","decorationButtonsInteractionObservable","buttons","buttonsArr","Object","keys","key","setPositionsForButtons","registerButtonsOnThemeModeChange","displayHint","HintIds2d","decorationPickHintArrow","btn","registerUIElement","length","button","setPositionY","setScale","disableDecorationButtons","enableDecorationButtons","onDecorationPickButtonClick","hideHintAsCompleted","show","lastClickedButtonName","onDiscardButtonClick","hide","cancelDecorationButtonClick","GameProcessEvents","decorationSuccessfullyPlaced","onSuccessfulDecorationPlacing","hintPosition","position","add2DHint","getButtonsView","BushDecorationButton","icon","FlowerDecorationButton","TreeDecorationButton","DiscardPickedDecorationButton","LightChangeButton","themeModeManager","createSpritesContainer","prepare","toggleMode","AbstractHint","state","HintState","Pending","markCompleted","Completed","shouldDisplay","hintsCollection","hints2D","Map","hints3D","setupHints","hint","set","hintId","hint2D","setPosition","add3DHint","hint3D","addToScene","display","hideHintAsNotCompleted","HintArrow2d","animate","arrowSprite","setRotation","Math","PI","visible","HintArrow3d","HintIds3d","decorationTargetAreaHintArrow","animationStarted","hintModel","rotation","z","draggableDecorations","entries","getDraggableDecorationByName","decoration","StaticDecorations3dManager","decorations","setupDecorations","getDecoration","registerElement","AbstractDraggableDecoration","animatePlacing","decorationModel","createDecoration","getDecorationHitArea","decorationHitArea","createDecorationHitArea","animatePlacingDecorationOnScene","yScale","timeline","BushDecoration","geometry","BoxGeometry","MeshStandardMaterial","color","Color","height","FlowerDecoration","hitAreaHeight","TreeDecoration","AbstractStaticDecoration","SkyBackground","renderer","getRenderer","sky","uniforms","turbidity","value","rayleigh","Sky","setScalar","sun","Vector3","effects","mieCoefficient","mieDirectionalG","elevation","azimuth","exposure","toneMappingExposure","phi","MathUtils","degToRad","theta","setFromSphericalCoords","sunPosition","copy","HouseDecoration","nightLights","dayLights","setupLights","getLightsByName","names","nightLightName","light","house","getObjectByName","light1","light2","light3","intensity","setDraggable","draggable","unsetDraggable","setTargetAreas","targetAreas","changeState","newState","selected","onPointerDownCb","onPointerMoveCb","onPointerMove","onPointerUpCb","onPointerUp","camera","getCamera","domElement","document","getElementById","plane","Plane","offset","intersection","raycaster","Raycaster","mouse","Vector2","draggableModel","hitAreas","subscribeForDomEvents","unsubscribeForDomEvents","addEventListener","removeEventListener","event","preventDefault","updateMouse","setFromCamera","intersects","intersectObjects","object","setFromNormalAndCoplanarPoint","ray","intersectPlane","sub","newPosition","clone","clampPosition","updateSelectedPosition","checkIfDecorationPlaced","disabled","isWithinTargetArea","onSuccessfulDecorationPlace","targetAreaPosition","getDecorationTargetArea","dx","dz","distance","sqrt","outerRadius","parameters","modelPosition","modifiedPosition","rect","getBoundingClientRect","clientX","left","width","clientY","top","AbstractLight","applyDayTheme","applyNightTheme","AmbientLight","FillLight","HemisphereLight","groundColor","MainLight","DirectionalLight","castShadow","lights","lightModeService","getSceneLights","targetAreasController","draggableDecorations3dManager","dragController","currentDecoration","draggableDecorationsManager","enableSceneDecoration","addTargetAreasToScene","onDecorationPick","onDecorationCancel","onDecorationSuccessfulPlacing","decorationButtonName","getDecorationTargetAreas","displayTargetAreas","hintedTargetAreaPosition","removeFromScene","hideTargetAreas","getNumberOfActiveTargetAreas","allDecorationsSuccessfullyPlaced","targetAreasPositions","index","DecorationTargetArea","createTargetArea","runIdleAnimation","getShaderMaterial","color1","color2","color3","color4","color5","ShaderMaterial","vertexShader","fragmentShader","side","DoubleSide","getGeometry","RingGeometry","mesh","assetsLoader","mainScene2d","decorations3d","sceneDecorationController","main2dScene","preloadSplashScreen","preloadAllAssets","showSplashScreen","showScene","removeSplashScreen","destroyScene","prepare3dScene","setMode","themeModeServices","mode","listeners","night","notifyListeners","listener","currentMode","element","uiElements","getData","window","onResize","screenWidth","innerWidth","screenHeight","innerHeight","GameScene","changeLightButton","decorationButtonsManager","resizeObservable","resize","scenesGetter","activeScenes","showOutro","main","getActiveSceneByName","hideScene","destroy","OutroScene","animateSceneAppearance","alpha","createBackground","createGameLogo","createDownloadButton","logo","graphic","PIXI","Graphics","fill","pivot","textStyle","TextStyle","fontFamily","fontSize","fontStyle","fontWeight","dropShadow","blur","angle","text","Text","style","anchor","onDownloadButtonClick","location","href","SplashScene","animations","max","createLoader","loader","rotationAnimation","fadeAnimation","destroyAllAnimations","animation","kill","lightsManager","addLights","remove","Pixi2dEngine","mainScene","app","Application","appendViewIntoContainer","appendChild","canvas","stopDefaultTicker","Ticker","shared","stop","addMainSceneToStage","stage","createApp","init","backgroundAlpha","time","deltaTime","ticker","Three3dEngine","scene3d","Scene","WebGLRenderer","antialias","PerspectiveCamera","setupRenderer","setSize","setupCamera","lookAt","render","aspect","updateProjectionMatrix","GsapUpdateEngine","wake","cb","AbstractGameEntry","DefaultGameEntry","gameApp","run","PixiContainer","interactive","tint","cursor","children","removeChildren","removeChild","setPositionX","on","offPointerDown","off","isVisible","PixiScene","PixiSprite","textureName","Sprite","Texture","from","setAnchor","ThreeLight","setColor","setIntensity","setCastShadow","cast","AbstractMultipleValuesObservable","observers","eventType","callback","has","unsubscribe","observersForEvent","observer","splice","delete","call","AbstractObservable","dependenciesContainer","config"],"sourceRoot":""}